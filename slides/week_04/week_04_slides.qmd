---
title: "Data cleaning and processing in R"
date: "June 27, 2023"
format:
  revealjs:
    chalkboard: true
execute:
  freeze: auto
  echo: false
---

# Homework Review

## Solving a common problem with the homework

# Principles of tidy data

## Cleaning your data: One of the most important and under-appreciated stages of good data analysis

Education finance data, like all other data, rarely come to us in a format that is plug-and-play ready for analysis

A high-quality analysis of your state's school finance system must start with gathering and cleaning relevant data.

**"Tidy datasets are all alike, but every messy dataset is messy in its own way." - Hadley Wickham**

## The principles of "tidy data" provide a helpful vision of what good, clean data should look like.

Tidy data follows three rules:

1.  Each column is a variable
2.  Each row is an observation
3.  Each cell is a value

![Source: R for Data Science](https://d33wubrfki0l68.cloudfront.net/6f1ddb544fc5c69a2478e444ab8112fb0eea23f8/08547/images/r4ds/tidy-1.png)

## If your data includes a variable that is embedded across several column names, use **pivot_longer()**

![Source: R for Data Science](https://epirhandbook.com/en/images/pivoting/pivot_longer_new.png)

## In-class coding example: How to use **pivot_longer()**



## If your data includes data from a single observation spread across multiple rows, use **pivot_wider()**

![Source: R for Data Science](https://bcheggeseth.github.io/112_fall_2022/images/pivot_wider.png)

## In-class coding example: How to use **pivot_wider()**

```{r}
# clean special ed data ---------

sch_sped <- sch_sped_raw |>
  rename_with("tolower") |>
  rename(dist_no = district_no,
         sch_no = school_no,
         schoolname = school_name,
         enroll = "2022-23 i&s") |>
  id_cleanr() |>
  mutate(option_number = paste0("option", option_number, "_enroll")) |>
  select(-dist_no, -sch_no)  |>
  pivot_wider(names_from = option_number,
              values_from = enroll) |>
  select(sch_id, schoolname, 
         option1_enroll, option2_enroll, option3_enroll, option4_enroll, option5_enroll,
         option6_enroll, option7_enroll, option8_enroll, option9_enroll, option10_enroll) 

``` 
# Techniques to clean messy data

## Cleaning data can be challenging, but it's easier if you take a systematic approach to every raw data file

+-------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Step Number                   | Goal                                                                                                                                                                   |
+===============================+========================================================================================================================================================================+
| 1.  Data import               | Ensure your import function is set up to read the data properly                                                                                                        |
+-------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| 2.  Column names              | Reformat or manually create column names that are:                                                                                                                     |
|                               |                                                                                                                                                                        |
|                               | -   lowercase                                                                                                                                                          |
|                               |                                                                                                                                                                        |
|                               | -   use underscores instead of spaces                                                                                                                                  |
|                               |                                                                                                                                                                        |
|                               | -   do not begin with a number                                                                                                                                         |
|                               |                                                                                                                                                                        |
|                               | -   follow a consistent format                                                                                                                                         |
|                               |                                                                                                                                                                        |
|                               |     -   Ex. rev_local_fy18 and rev_state_fy18                                                                                                                          |
+-------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| 3.  Mis-formatted data        | Work with functions from base R like 'as.numeric()' or from the 'tidyverse' packages like 'stringr' to clean the data that appear in a different format than you want. |
+-------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| 4.  Missing data and outliers | Identify where in your dataset there are missing variables and/or outliers - this may be more of an iterative process as your explore your data.                       |
+-------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

## In-class coding example: tennessee_clean.R

```{r}
# clean adm data ----------
sch_adm_clean <- sch_adm_raw |>
  # tidy column names
  rename_with("tolower") |>
  # rename_with( ~ str_replace_all(., "no", "id")) %>%
  rename_with( ~ str_replace_all(., "district", "dist")) |>
  rename_with( ~ str_replace_all(., "school", "sch"))  |> 
  rename_with( ~ str_replace_all(., " ", "_")) |>
  rename(voc_adm = "vocadm",
         gr_n_adm = "n",
         gr_k_adm = "k",
         gr_1_adm = "1",
         gr_2_adm = "2",
         gr_3_adm = "3",
         gr_4_adm = "4",
         gr_5_adm = "5",
         gr_6_adm = "6",
         gr_7_adm = "7",
         gr_8_adm = "8",
         gr_9_adm = "9",
         gr_10_adm = "10",
         gr_11_adm = "11",
         gr_12_adm = "12") |>
  # create tidy sch_id var
  mutate(dist_no = str_pad(dist_no, width = 3, side = "left", pad = "0"),
         sch_no = str_pad(sch_no, width = 4, side = "left", pad = "0"), 
         sch_id = paste0(dist_no, "-", sch_no)) |>
  rename(tutoring_adm = "tcap_2019_-gr_3") |>
  filter(total_adm > 0) |>
  select(sch_id, dist_no,
         dist_name, sch_name,charter, rural, 
         gr_n_adm, gr_k_adm, gr_1_adm, gr_2_adm, gr_3_adm, gr_4_adm,
         gr_5_adm, gr_6_adm, gr_7_adm, gr_8_adm, gr_9_adm, gr_10_adm,
         gr_11_adm, gr_12_adm, total_adm, voc_adm, dyslexia, early_literacy,
         tutoring_adm) |>
  arrange(sch_id)

``` 

# Joining datasets

## Your data will rarely come to you in a single table. You will need to join functions to merge dataframes together

To join two dataframes, they need to share a common column with a unique identifier.

State departments of education typically assign a unique ID number to each school district. **Make sure this is available in your datasets.**

Joining datasets on a name (e.g. school or district) can create problems based on:

-   Capitalization (Mcgregor v. McGregor)
-   Abbreviation (St. Paul v. Saint Paul)
-   Mis-spelling (it happens!)

## There are different ways to join datasets together, but using **left_join()** will keep your work consistent

::: columns
::: {.column width="50%"}
::: {.column width="50%"}
Once you have dataframes that share a common ID column, start with your most reliable set of data (typically student count data like ADM or enrollment) and use **left_join()** to attach additional data to that table.

This will keep the number of rows (e.g. districts or schools) consistent as you use **left_join()** to add more data.
:::
:::

::: {.column width="50%"}
![Source: R for Data Science](https://r4ds.had.co.nz/diagrams/join-outer.png)
:::
:::

## In-class coding example: How to use **left_join()**

## As you use **left_join()** to merge dataframes together, it's helpful to use anti-join to examine missing data.

Using the **anti_join()** function from the [dplyr](https://dplyr.tidyverse.org/index.html) package in R returns all rows in one data frame that do not have matching values in another data frame. Using anti_join() allows you to explore the incongruities in your data.

![Source: R for Data Science](https://d33wubrfki0l68.cloudfront.net/f29a85efd53a079cc84c14ba4ba6894e238c3759/c1408/diagrams/join-anti.png)

## In-class coding example: How to use **anti_join()**

# Break

# An example with **tidycensus**

## The **'tidycensus'** package can provide data at the school district level that may be helpful for school finance analysis

::: columns
::: {.column width="50%"}
The Census Bureau collects a lot of information that is reported at the school district level. This includes information on topics that are relevant to school finance, like housing.

The **'tidycensus'** R package makes it easy to access, explore, and analyze Census Bureau data.
:::

::: {.column width="50%"}
:::
:::

## To get started, you’ll need to sign up for an API key with the Census Bureau, then install the tidycensus package



# In-class exercise

## In-class coding example: clean_and_join.R (1/3)

```{r}
#| echo: true

# load -----------

options(scipen = 999)

library(tidyverse)
library(edbuildr)
library(tidycensus)
library(viridis)
library(scales)

# get your own api key from https://api.census.gov/data/key_signup.html
census_api_key("e06cf35bdaf878b6e70975a941f787b2923e753b", install = TRUE, overwrite = TRUE)

# get edbuild data
edbuild_fy19 <- masterpull(data_type = "geo")

# load census variables from 2019 acs 5-year estimates
v19 <- load_variables(2019, "acs5", cache = TRUE)

# get mortgage data for unified school districts
mortgage_unified_raw <- get_acs(variables = c("B25101_001", # total households
                                              "B25101_002", # total with a mortgage
                                              "B25101_024"), # total not mortgaged
                        geography = "school district (unified)",
                        state = "MN", 
                        year = 2019)

# get mortgage data for elementary school districts
mortgage_elementary_raw <- get_acs(variables = c("B25101_001", # total households
                                                  "B25101_002", # total with a mortgage
                                                  "B25101_024"), # total not mortgaged
                                    geography = "school district (elementary)",
                                    state = "MN", 
                                    year = 2019)

# get mortgage data for secondary school districts
mortgage_secondary_raw <- get_acs(variables = c("B25101_001", # total households
                                                  "B25101_002", # total with a mortgage
                                                  "B25101_024"), # total not mortgaged
                                    geography = "school district (secondary)",
                                    state = "MN", 
                                    year = 2019)


# clean ------------

# clean mortgage data for unified school districts
mortgage_pct_unified <- mortgage_unified_raw |> 
  # replace vars with more descriptive names
  mutate(variable = str_replace_all(variable, "B25101_001", "households"),
         variable = str_replace_all(variable,"B25101_002", "with_mortgage"),
         variable = str_replace_all(variable,"B25101_024", "no_mortgage")
        ) |>  # close mutate 
  # remove margin of error column
  select(-moe) |> 
  # pivot variable column into distinct columns
  pivot_wider(names_from = variable, values_from = estimate) |> 
  # calculate percent of households within a school district with a mortgage
  mutate(mortgage_pct = with_mortgage / households) 

# clean mortgage data for elementary school districts
mortgage_pct_elementary <- mortgage_elementary_raw |> 
  mutate(variable = str_replace_all(variable, "B25101_001", "households"),
         variable = str_replace_all(variable,"B25101_002", "with_mortgage"),
         variable = str_replace_all(variable,"B25101_024", "no_mortgage")
  ) |>  # close mutate 
  select(-moe) |> 
  pivot_wider(names_from = variable, values_from = estimate) |> 
  mutate(mortgage_pct = with_mortgage / households)

# clean mortgage data for secondary school districts
mortgage_pct_secondary <- mortgage_secondary_raw |> 
  mutate(variable = str_replace_all(variable, "B25101_001", "households"),
         variable = str_replace_all(variable,"B25101_002", "with_mortgage"),
         variable = str_replace_all(variable,"B25101_024", "no_mortgage")
  ) |>  # close mutate 
  select(-moe) |> 
  pivot_wider(names_from = variable, values_from = estimate) |> 
  mutate(mortgage_pct = with_mortgage / households)
# NOTE: this data isn't really that useful for mn!


```

## In-class coding example: clean_and_join.R (2/3)
```{r}
#| echo: true

# join ----------

# join unified and elementary data by binding rows
mortgage_pct_mn <- mortgage_pct_unified |> 
  bind_rows(mortgage_pct_elementary) |> 
  # filter out summary row
  filter(GEOID != "2199999") |> 
  # arrange from largest to smallest district
  arrange(-households)

# join edbuild and census data using left_join
edbuild_mortgage_mn <- edbuild_fy19 |> 
  filter(State == "Minnesota") |> 
  left_join(mortgage_pct_mn, by = c("NCESID" = "GEOID"))

# do the join again, but this time select for the columns we want to keep
# to avoid duplicates like district.x and district.y
edbuild_mortgage_mn <- edbuild_fy19 |> 
  filter(State == "Minnesota") |> 
  left_join(mortgage_pct_mn |> 
              select(GEOID, households, with_mortgage, mortgage_pct),
            by = c("NCESID" = "GEOID"))

# use anti_join() to check for districts with no mortgage data
edbuild_mortgage_mn_no_match <- edbuild_fy19 |> 
  filter(State == "Minnesota") |> 
  anti_join(mortgage_pct_mn |> 
              select(GEOID,households, with_mortgage, mortgage_pct),
            by = c("NCESID" = "GEOID"))

# run the reverse anti_join to see if the census data has 
#  districts not included in the edbuild table
mortgage_edbuild_mn_no_match <- mortgage_pct_mn |> 
  select(GEOID,households, with_mortgage, mortgage_pct) |> 
  anti_join(edbuild_fy19 |> 
              filter(State == "Minnesota") ,
            by = c("GEOID" = "NCESID"))


```
## In-class coding example: clean_and_join.R (3/3)

```{r}
#| echo: true
# plot -----------

# first plot of the joined dataset
ggplot(edbuild_mortgage_mn) +
  geom_point(aes(x = MHI, y = mortgage_pct, 
                 color = StPovRate, size = ENROLL),
             alpha = .7) +
  scale_size_area(max_size = 10, labels = label_comma()) +
  scale_x_continuous(labels = label_dollar()) +
  scale_y_continuous(labels = label_percent()) +
  scale_color_viridis(labels = label_percent()) +
  labs(x = "MHI", y = "Percent of households with a mortgage",
       color = "Poverty rate", size = "Enrollment") +
  theme_bw()

# facet by sdType
ggplot(edbuild_mortgage_mn) +
  geom_point(aes(x = MHI, y = mortgage_pct, 
                 color = StPovRate, size = ENROLL),
             alpha = .7) +
  scale_size_area(max_size = 10, labels = label_comma()) +
  scale_x_continuous(labels = label_dollar()) +
  scale_y_continuous(labels = label_percent()) +
  scale_color_viridis(labels = label_percent()) +
  labs(x = "MHI", y = "Percent of households with a mortgage",
       color = "Poverty rate", size = "Enrollment") +
  facet_wrap(~sdType) +
  theme_bw()

# filter out secondary districts and create better labels for 
# elementary and unified districts
ggplot(edbuild_mortgage_mn |> 
         filter(sdType != "secon") |> 
         mutate(sdType = case_when(sdType == "elem" ~ "Elementary",
                                   sdType == "uni" ~ "Unified"))) +
  geom_point(aes(x = MHI, y = mortgage_pct, 
                 color = StPovRate, size = ENROLL),
             alpha = .7) +
  scale_size_area(max_size = 10, labels = label_comma()) +
  scale_x_continuous(labels = label_dollar()) +
  scale_y_continuous(labels = label_percent()) +
  scale_color_viridis(labels = label_percent()) +
  labs(x = "MHI", y = "Percent of households with a mortgage",
       color = "Poverty rate", size = "Enrollment") +
  facet_wrap(~sdType) +
  theme_bw()

# same chart, but filter  allow for free x+y axis scales
ggplot(edbuild_mortgage_mn |> 
         filter(sdType != "secon") |> 
         mutate(sdType = case_when(sdType == "elem" ~ "Elementary",
                                   sdType == "uni" ~ "Unified"))) +
  geom_point(aes(x = MHI, y = mortgage_pct, 
                 color = StPovRate, size = ENROLL),
             alpha = .7) +
  scale_size_area(max_size = 10, labels = label_comma()) +
  scale_x_continuous(labels = label_dollar()) +
  scale_y_continuous(labels = label_percent()) +
  scale_color_viridis(labels = label_percent()) +
  labs(x = "MHI", y = "Percent of households with a mortgage",
       color = "Poverty rate", size = "Enrollment") +
  facet_wrap(~sdType, scales = "free") +
  theme_bw()

```


# Homework assignment
