{
  "hash": "7768dc262ae4a6017a1984a1533e86cc",
  "result": {
    "markdown": "---\ntitle: \"Mapping in R\"\ndate: \"July 18, 2023\"\nformat:\n  revealjs:\n    chalkboard: true\nexecute:\n  freeze: auto\n  echo: false\n---\n\n::: {.cell}\n\n:::\n\n\n# Homework Review\n\n## Streamlining code in our cleaning scripts\n\n-   Initial state data cleaning is looking pretty good!\n-   There are a few code style practices for us to adopt moving forward:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# when reading/writing data, the full file path is not needed\nfinance_raw <- read_csv(\"~/Desktop/BW R Course/capstone/data/state_data.csv\")\n\n# only include the portion of the filepath that is within your \n# project folder, in this case, our project is in the `capstone` folder\nfinance_raw <- read_csv(\"data/state_data.csv\")\n\n# these are helpful commands to run in the console to check your dfs\n# but they don't need to be included in your scripts. if you want to keep \n# them in, please comment them out when theyre not in use!\n\n# View(finance_raw)\n# names(finance_raw)\n```\n:::\n\n\n## Viewing homework feedback on GitHub\n\n![](images/gh_comment_1.png){fig-align=\"center\"}\n\n## Viewing homework feedback on GitHub\n\n![](images/gh_comment_2.png){fig-align=\"center\"}\n\n## Viewing homework feedback on GitHub\n\n![](images/gh_comment_3.png){fig-align=\"center\"}\n\n## Additional workflow tips for using git\n\n::: columns\n::: {.column width=\"50%\"}\n-   Be sure to commit and push the data files you're cleaning and joining!\n\n-   After Krista or I submit feedback, be sure to click the \"Pull\" button in your RStudio project to update your code to reflect the changes we've made.\n\n-   Break your commit and push cycles into small but meaningful chunks\n:::\n\n::: {.column width=\"50%\"}\n![](images/git_pull.png)\n:::\n:::\n\n## Working with `pivot_wider()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load -----\nlibrary(tidyverse)\nlibrary(readxl)\n\noptions(scipen = 999)\n\nmn_grad_fy22_raw <- read_excel(\"data/2022 Graduation Indicators.xlsx\", \n                                                              sheet = \"District\", skip = 4)\n\n# clean ----------\n\n# create df of all grad data with cols for each demographic group  \nmn_all_grad_data_fy22 <- mn_grad_fy22_raw |>\n  # tidy up column names\n  rename_with(tolower) |>\n  rename(county = \"county name\",\n         district_number = \"district number\",\n         district = \"district name\",\n         group_category = \"group category\",\n         student_group =  \"student group\",\n         ending_status = \"ending status\",\n         four_year_count = \"four year count\",\n         total_cohort_count = \"total four year cohort count\") |>\n  # calculate pct of cohort\n  mutate(cohort_pct = four_year_count / total_cohort_count) |>\n  select(district_number, district, student_group, ending_status, cohort_pct) |>\n  pivot_wider(names_from = student_group,\n              values_from = cohort_pct)\n\n# create df that only includes graduate rate\nmn_grad_fy22_2 <- mn_all_grad_data_fy22 |> \n  filter(ending_status == \"Graduate\")\n```\n:::\n\n\n\n<!-- # What should the future of school finance equity look like? -->\n\n<!-- ## The variability in policies and context within and among states makes it impossible to set many hard-and-fast rules. Below are a couple of recommendations. -->\n\n<!-- -   A **student-based state school funding formula** is the best starting point for transparency and equity. -->\n\n<!-- -   Formulas should have **weights that allocate additional funding** for students with disabilities, English language learners, and low-income students, as well as other mechanisms to allocate funding toward school districts serving students with additional educational needs. -->\n\n<!-- ## Using local property tax revenue as the primary method for funding local schools sets inequity into the core of school funding, and ties school funding to the real estate market. -->\n\n<!-- This is not the only way to fund schools. If a state uses local tax revenue as part of its education finance system, there must be strong equity-driven policies in place to balance revenue scales for lower-wealth districts, such as county level revenue pooling for states with smaller districts, and caps, supplementation, or redistributive policies on local tax revenue to counteract inequities created by local funding and to prevent runaway local spending in high-wealth districts. -->\n\n<!-- ## Questions for Advocates {.smaller} -->\n\n<!-- -   Understand your state education finance system -->\n\n<!-- -   What data can you use to show how state funding lines up with student needs, especially for low-income students, students with disabilities, and English language learners? -->\n\n<!-- -   What kind of school funding formula does your state use? -->\n\n<!-- -   If your state does not currently have a student-based formula, how (if at all) does the existing formula consider students' different learning needs? -->\n\n<!-- -   If your state includes weights in its funding formula, how are those weights structured and determined? -->\n\n<!-- -   If a student is eligible to receive multiple weights, does your state's funding formula provide for that? - How much does total funding per student vary among school districts? What differences among districts influence funding the most? -->\n\n<!-- -   How do districts in your state allocate funding to individual schools? -->\n\n<!-- -   Does your state have a process to conduct resource or needs assessments? Can this process be used at the district level? - How have lawsuits shaped the school finance landscape in your state? -->\n\n<!-- -   Is there current school finance litigation in your state? If so, what are the primary arguments, what is the anticipated timeline for a ruling, and what has been the reaction of policymakers to the suit? -->\n\n# Introduction to `sf`\n\n## Overview of the `sf` package\n\n-   There are many R packages that handle spatial data but `sf` is the most modern and easy-to-use.\n\n-   In the `sf` package, spatial data is represented as a *simple feature*, which is a set of standards on how to store spatial objects.\n\n-   Spatial data is represented as a data frame with:\n\n    -   A geography column that lists all the coordinates that make up the shape\n\n    -   \"Slots\" that hold spatial information\n\n::: callout\nYou can learn more about simple features and the sf package [here.](https://r-spatial.github.io/sf/articles/sf1.html)\n:::\n\n## Reading and writing functions in `sf`\n\n-   `sf` uses the Geospatial Data Abstraction Library (GDAL)\n-   Use `st_read` to import all spatial data\n\n`dataframe <- st_read(\"filepath.filetype\")`\n\n-   Use `st_write` to export all spatial data\n\n`st_write(dataframe, \"filepath.filetype\")`\n\n-   The filetype indicates the type of file you want to write to your computer - called the driver.\n    -   This will most likely be either a shapefile (.shp) or geojson (.geojson)\n\n## Converting lat-long location into simple features\n\nThere are a range of shapefiles available that we can use for mapping, but there are cases when we might have other location data, like latitude-longitude pairs, that could be useful to map. The `sf` package has a helpful function that allows us to convert data in latidude and longitude columns into the simple features format.\n\nConvert a dataframe from lat/long to a simple feature using `st_as_sf()`\n\n-   **dataframe**\n-   **coords**: The columns that define x (latitude) and y (longitude)\n-   **crs**: The coordinate system that translate x and y to a location on Earth, provided by using the `st_crs()` function. The most commonly used is `\"EPSG:4326\"`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexample <- st_as_sf(dataframe = df, \n                    coords = c(\"lat\", \"long\"), \n                    crs = st_crs(\"EPSG:4326\"))\n```\n:::\n\n\n## In-class exercise: Create a simple features object\n\n**Step 1**: At the top of your script, load in the `sf` package and and your clean data into your environment\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load -------\n\nlibrary(tidyverse) \nlibrary(sf)\n\noptions(scipen = 999)\n\n# Load in the Minnesota schools data \n\nmn_schools <- read_csv(here::here(\"slides/week_06/data/mn_schools_clean.csv\"))\n\nglimpse(mn_schools)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1,905\nColumns: 10\n$ school                <chr> \"112 ALC MIDDLE SCHOOL\", \"6-12TH GRADE BUILDING\"…\n$ district              <chr> \"EASTERN CARVER COUNTY PUBLIC SCHOOL\", \"CLINTON-…\n$ ncesid                <dbl> 2708190, 2700150, 2702264, 2700026, 2700026, 273…\n$ title_1_school_status <chr> \"2-Title I targeted assistance school\", \"2-Title…\n$ lat                   <dbl> 44.84160, 45.56920, 45.03684, 44.74140, 44.74140…\n$ long                  <dbl> -93.59690, -96.43320, -92.98547, -93.11454, -93.…\n$ total_enroll          <dbl> 404, 131, 82, 46, 140, 67, 332, 401, 456, 568, 9…\n$ bipoc_enroll          <dbl> 171, 4, 42, 29, 66, 65, 30, 47, 48, 547, 40, 15,…\n$ bipoc_pct             <dbl> 0.42326733, 0.03053435, 0.51219512, 0.63043478, …\n$ white_enroll          <dbl> 233, 127, 40, 17, 74, 2, 302, 354, 408, 21, 50, …\n```\n:::\n:::\n\n\n## In-class exercise: Create a simple features object\n\n**Step 2**: Turn the Minnesota schools csv file into an `sf` object using the `st_as_sf()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# clean -------\n\n# Convert to sf object for mapping\nmn_schools_shp <- st_as_sf(mn_schools,\n                           coords = c(\"long\", \"lat\"),\n                           crs = st_crs(\"EPSG:4326\"))\n\nglimpse(mn_schools_shp)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1,905\nColumns: 9\n$ school                <chr> \"112 ALC MIDDLE SCHOOL\", \"6-12TH GRADE BUILDING\"…\n$ district              <chr> \"EASTERN CARVER COUNTY PUBLIC SCHOOL\", \"CLINTON-…\n$ ncesid                <dbl> 2708190, 2700150, 2702264, 2700026, 2700026, 273…\n$ title_1_school_status <chr> \"2-Title I targeted assistance school\", \"2-Title…\n$ total_enroll          <dbl> 404, 131, 82, 46, 140, 67, 332, 401, 456, 568, 9…\n$ bipoc_enroll          <dbl> 171, 4, 42, 29, 66, 65, 30, 47, 48, 547, 40, 15,…\n$ bipoc_pct             <dbl> 0.42326733, 0.03053435, 0.51219512, 0.63043478, …\n$ white_enroll          <dbl> 233, 127, 40, 17, 74, 2, 302, 354, 408, 21, 50, …\n$ geometry              <POINT [°]> POINT (-93.5969 44.8416), POINT (-96.4332 …\n```\n:::\n:::\n\n\nNote: The `sf` dataframe looks like a regular dataframe, except the `lat` and `long` columns have been merged into one column, now called `geometry`\n\n## In-class exercise: Create a simple features object\n\n**Step 3**: Check the projection of your objects using the `st_crs()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# check ----------\n\n# Check the projection of your objects using the st_crs() function \n\n# QUESTION: Why does this dataframe not have a coordinate system? \nst_crs(mn_schools)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System: NA\n```\n:::\n\n```{.r .cell-code}\nst_crs(mn_schools_shp)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System:\n  User input: EPSG:4326 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n        MEMBER[\"World Geodetic System 1984 (Transit)\"],\n        MEMBER[\"World Geodetic System 1984 (G730)\"],\n        MEMBER[\"World Geodetic System 1984 (G873)\"],\n        MEMBER[\"World Geodetic System 1984 (G1150)\"],\n        MEMBER[\"World Geodetic System 1984 (G1674)\"],\n        MEMBER[\"World Geodetic System 1984 (G1762)\"],\n        MEMBER[\"World Geodetic System 1984 (G2139)\"],\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]],\n        ENSEMBLEACCURACY[2.0]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    USAGE[\n        SCOPE[\"Horizontal component of 3D system.\"],\n        AREA[\"World.\"],\n        BBOX[-90,-180,90,180]],\n    ID[\"EPSG\",4326]]\n```\n:::\n:::\n\n\n## In-class exsercise: Mapping with `geom_sf()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# plot ---------------\n\n# simple plot of sf data\nggplot(mn_schools_shp) +\n  geom_sf() +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](week_06_slides_files/figure-revealjs/unnamed-chunk-8-1.png){width=960}\n:::\n:::\n\n\n## In-class exsercise: Mapping with `geom_sf()`\n\n-   The `tigris` package provides access to a range of shapefiles from the U.S. Census Bureau\n-   Using the `states()` function, we can download state outlines and then filter for the state we want to use.\n-   Setting the `cb` parameter of the `states()` function to `TRUE` will provide the most generally recognized shape file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# get state outline from tigris ----------\nlibrary(tigris)\n\nmn_outline <- states(cb = TRUE) |> \n  filter(NAME == \"Minnesota\")\n```\n:::\n\n\n## In-class exsercise: Mapping with `geom_sf()`\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nlibrary(scales)\nlibrary(viridis)\n\n# plotting multiple geom_sf layers ---------\nggplot() +\n  geom_sf(data = mn_outline, color = \"black\") +\n  geom_sf(data = mn_schools_shp, \n          # we can use aes() to map data just like with geom_point()\n          aes(size = total_enroll,\n              color = bipoc_pct),\n          alpha = .5) +\n  scale_color_viridis(labels = percent_format()) +\n  scale_size_area(max_size = 5,\n                  labels = comma_format()) +\n  labs(color = \"Percent BIPOC\", \n       size = \"Enrollment\",\n       title = \"Minnesota School Size, Location, and Demographics\") +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](week_06_slides_files/figure-revealjs/unnamed-chunk-10-1.png){width=960}\n:::\n:::\n\n\n# Making maps with `edbuildmapr`\n\n## Review: Overview of the `edbuildr` package\n\n-   The goal of `edbuildr` is to import EdBuild's master dataset that includes school district finance, student demographics, and community economic indicators for every school district in the United States.\n-   The master dataset is available for any school year from 2013 to 2019 or longitudinally for all years 2013-2019.\n    -   School year is identified by the end year. For example, the 2018-19 school year is 2019.\n-   The master dataset is build from the:\n    -   U.S. Census Bureau\n    -   Annual Survey of School System Finances (F33), and\n    -   join data from the National Center for Education Statistics, Common Core of Data (CCD), Small Area Income and Poverty Estimates (SAIPE), and Education Demographic and Geographic Estimates (EDGE).\n\n## `edbuildmapr` makes it easier to perform spatial analysis of education data\n\n-   R can use objects called \"shapefiles\" to create maps\n-   The `edbuildmapr` package makes it easy to produce high-quality maps as you analyze school finance data.\n-   To get started, you will need to install two packages:\n    -   `edbuildmapr`: Simplifies the use of school district shapefiles.\n\n    -   `sf`: Standardizes how to encode spatial vector data.\n\n## LIVE CODING EXAMPLE: Making a state map with `edbuildmapr`\n\n**Step 1**: Load in packages and data from `edbuildmapr` and `edbuild`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load -------\n\noptions(scipen = 999)\n\nlibrary(edbuildr)\nlibrary(edbuildmapr)\nlibrary(viridis)\nlibrary(scales)\n\n# load in the school district mapping data\nsd_map_raw <- sd_shapepull(data_year = \"2019\", with_data = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `shapefile_1819' from data source \n  `/private/var/folders/8n/xvlf4d6n1c12rf9hhcl03tp80000gn/T/Rtmp3ZLwqT/filee00279a415d/shapefile_1819.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 13315 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -179.1686 ymin: -14.54858 xmax: 179.7487 ymax: 71.38961\nGeodetic CRS:  NAD83\n```\n:::\n\n```{.r .cell-code}\n# load in raw district finance data\ndist_data_raw <- masterpull(data_type = \"geo\")\n```\n:::\n\n\n## LIVE CODING EXAMPLE: Making a state map with `edbuildmapr`\n\n**Step 2**: Filter for your state, create a new variable, and join the data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# filter mapping data for your state\nstate_shp_raw <- sd_map_raw |> \n  # tidy up colnames\n  rename_with(tolower) |> \n  filter(state == \"Kentucky\") |>\n  rename(ncesid = geoid) |> \n  rename_with(tolower) |> \n  select(ncesid, geometry)\n\n# filter state finance data for your state\nstate_data <- dist_data_raw |> \n  rename_with(tolower) |> \n  filter(state == \"Kentucky\")\n\n# join data\nstate_shp <- state_shp_raw |> \n  left_join(state_data, by = \"ncesid\") |> \n  mutate(pct_sr = srpp / slrpp)\n```\n:::\n\n\n## LIVE CODING EXAMPLE: Making a state map with `edbuildmapr`\n\n**Step 3**: Plot a basic map\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\n# plot a basic map\nggplot()  + \n  geom_sf(data = state_shp, aes(fill = pct_sr)) +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](week_06_slides_files/figure-revealjs/unnamed-chunk-13-1.png){width=960}\n:::\n:::\n\n\n## LIVE CODING EXAMPLE: Making a state map with `edbuildmapr` {.smaller}\n\nThe map looks okay, but there is a lot we can improve!\n\n**Step 4**: Make several aesthetic changes\n\n-   Change the color of the lines to white within `geom_sf()`\n-   Reverse the direction of the color scale within `scale_fill_viridis()`\n-   Add a title, subtitle, and source caption within `labs()`\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\n# load -------\n\n# Make several aesthetic changes\nggplot() + \n  geom_sf(data = state_shp, \n          aes(fill = pct_sr),\n          color = \"#ffffff\") +\n  theme_void() +\n  scale_fill_viridis(name = \"Percent K-12 Budget\\nfrom State Revenue (%)\",\n                     labels = percent_format(accuracy = 1), \n                     direction = -1) +\n  labs(\n    title = \"School Districts' Reliance on State Revenue\",\n    subtitle = \"Percent of District K-12 Revenue From State, 2018-19\",\n    caption = \"Source: EdBuild\")\n```\n\n::: {.cell-output-display}\n![](week_06_slides_files/figure-revealjs/unnamed-chunk-14-1.png){width=960}\n:::\n:::\n\n\n## LIVE CODING EXAMPLE: Making a state map with `edbuildmapr`\n\n**Step 5**: Make your own color palette and create bins to more clearly break up your data!\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\n# load -------\n\n# create custom color palette\nbw_state_revenue <- c(\"#BEC6CE\", \"#FFC762\", \"#007786\", \"#212B46\", \"#6D1E4A\")\n\n# plot another nicely-formatted map\nggplot()  + \n  geom_sf(data = state_shp,\n          aes(fill = pct_sr),\n          color = \"#ffffff\") +\n  theme_void() +\n  scale_fill_stepsn(breaks=c(0, .3, .5, .7, 1), # Breaks up the data\n                    colors = bw_state_revenue, \n                    name=\"State K-12 Revenue (%)\",\n                    labels=percent_format(accuracy = 1L)) + \n  labs(\n    title = \"School Districts' Reliance on State Revenue\",\n    subtitle = \"Percent of District K-12 Revenue From State (2019)\",\n    caption = \"Source: EdBuildr Data, 2019\")\n```\n\n::: {.cell-output-display}\n![](week_06_slides_files/figure-revealjs/unnamed-chunk-15-1.png){width=960}\n:::\n:::\n\n\nYou can export your map like any other plot via `ggsave()`\n\n## State Group Activity: Making maps with `edbuildr` data\n\n-   Clone the `hw06-` repo, which should be available via GitHub.\n-   Open this example script: `scripts/edbuildmapr_example.R`.\n-   In small groups or your state teams, pull in data from `edbuildr` and `edbuildmapr` for your state and create a map!\n-   Play around with the colors, fills, and variables.\n-   Be prepared for at least one person in your group to share their map!\n\nAlex and Krista will be circulating to answer questions. Feel free to also come back into the main room if you have questions!\n\n# Break\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_e73069ae\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;font-size:1.5em;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">10</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n\n# Introduction to the `leaflet` package\n\n## `leaflet` is an interactive mapping package\n\n-   The `leaflet()` function creates a blank, interact map canvas in your RStudio viewer pane\n-   Based on `leaflet.js`, which is a javascript library.\n    -   Most common javascript library for making maps\n-   You can add elements to the map canvas using the generic `addControl()` function:\n    -   `addProviderTiles()`: Add a basemap\n\n    -   `addCircleMarker()` and `addMarker()`: Adds a point layer\n\n    -   `addPolylines()`: Adds a line layer\n\n    -   `addPolygons()`: Adds a polygon layer\n\n<!-- ## Map location with `leaflet` -->\n\n<!-- Once a layer is added, the map will automatically zoom to the boundaries of the data that you've included in your layer. This is also referred to as the extent of the layer. -->\n\n<!-- -   To change the boundaries of the data you've included in your layer -->\n\n<!-- `fitBounds(lng1, lat1, lng2, lat2)` -->\n\n<!-- ::: callout -->\n\n<!-- lng1, lat1 is the Southeast corner of the map. lng2, lat2 is the Northwest corner of the map. -->\n\n<!-- ::: -->\n\n<!-- -   To center the map on a point and define the zoom level -->\n\n<!-- `setView(lng = , lat = , zoom = )` -->\n\n## In-class exercise: Mapping with `leaflet`\n\n**Step 1**: Load packages and then download and clean data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load -------------\n\nlibrary(tidyverse)\nlibrary(edbuildr)\nlibrary(edbuildmapr)\nlibrary(viridis)\nlibrary(scales)\nlibrary(sf)\nlibrary(leaflet)\n\n# load in the school district mapping data\nsd_map_raw <- sd_shapepull(data_year = \"2019\", with_data = TRUE)\n\ndist_data_raw <- masterpull(data_type = \"geo\")\n\n# clean ----------------\n\n# filter mapping data for your state\nstate_shp_raw <- sd_map_raw |> \n  # tidy up colnames\n  rename_with(tolower) |> \n  filter(state == \"Kentucky\") |>\n  rename(ncesid = geoid) |> \n  rename_with(tolower) |> \n  select(ncesid, geometry)\n\n# filter finance data for your state\nstate_data <- dist_data_raw |> \n  rename_with(tolower) |> \n  filter(state == \"Kentucky\")\n\n# join data\nstate_shp <- state_shp_raw |> \n  left_join(state_data, by = \"ncesid\") |> \n  mutate(pct_sr = srpp / slrpp) |> \n  st_transform(st_crs(\"EPSG:4326\"))\n```\n:::\n\n\n## In-class exercise: Mapping with `leaflet`\n\n**Step 2**: Create leaflet map with a base layer\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load -------\nlibrary(leaflet)\n\n# Create a leaflet map with a base layer \n\nleaflet() |>\n  addProviderTiles(provider = \"CartoDB.Positron\") \n```\n:::\n\n\nThere are many base layer options available for `leaflet`; [check them out here](https://leaflet-extras.github.io/leaflet-providers/preview/).\n\n## In-class exercise: Mapping with `leaflet`\n\n**Step 3**: Add a layer of district shapes as polygons\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add district shapes\nleaflet() |>\n  addProviderTiles(provider = \"CartoDB.Positron\") |>\n  addPolygons(data = state_shp)\n```\n:::\n\n\n## In-class exercise: Mapping with `leaflet`\n\n**Step 4**: Define the color and border thickness of polygons\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# define the color and thickness of borders \nleaflet() |>\n  addProviderTiles(provider = \"CartoDB.Positron\") |>\n  addPolygons(data = state_shp,\n                   color = \"#ababab\",\n                   weight = .5)\n```\n:::\n\n\n## Adding a popup to your `leaflet` map\n\nThe **popup** parameter defines the text that displays when you click on an object in your **leaflet** map.\n\n-   Combine reactive data elements with text using the **paste0()** function\n\n`popup = paste0(\"School: \",  ga_schools_shp$school, \"<br> Enrollment: \", ga_schools_shp$total_enroll)`\n\n::: callout\nNote: A few considerations when adding the popup parameter:\n\n-   Make sure that you put the text within quotes\n-   Use **dataframe\\$** to call the variables you want to use\n-   \\<br\\> is the line break html tag, which starts a new line\n:::\n\n## In-class exercise: Mapping with `leaflet`\n\n**Step 5**: Add a popup layer\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add a popup layer\nleaflet() |>\n  addProviderTiles(provider = \"CartoDB.Positron\") |>\n  addPolygons(data = state_shp,\n              color = \"#ababab\",\n              weight = .5,\n              popup = paste0(\"District: \",\n                             str_to_title(state_shp$name), \n                             \"<br> Enrollment: \", \n                             comma(state_shp$enroll),\n                             \"<br> Percent state revenue: \",\n                             percent(state_shp$pct_sr, accuracy = .1)))\n```\n:::\n\n\n## There are many other parameters you can style in your `leaflet` map\n\n-   `stroke`: Outline of the circles or polygons\n-   `color`: Outline color\n-   `weight`: Thickness of the outline\n-   `opacity`: Transparency out the outline from 0 (transparent) to 1 (opaque)\n-   `fill`: Inside of the circle or polygon\n-   `fillcolor`: Inside color\n\n::: callout\nYou can define colors with the hex code or by referencing one of the color names included in base R.\n:::\n\n## In-class exercise: Mapping with `leaflet` {.smaller}\n\n**Step 6**: Create a more advanced map with dynamic fill and a legend\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# advanced leaflet example ------------------\n\nbw_primary <- c(\"#6D1E4A\", # 1 plum\n                \"#007786\", # 2 teal\n                \"#0D525A\", # 3 dark green\n                \"#212B46\", # 4 navy\n                \"#5A6675\", # 5 grey\n                \"#F0DEC1\") # 6 cream\n\nbw_secondary <- c(\"#FFC762\", # 1 yellow\n                  \"#FFB653\", # 2 orange\n                  \"#BEC6CE\", # 3 light grey\n                  \"#2E1A4A\", # 4 deep purple\n                  \"#7EA2D1\", # 5 soft blue\n                  \"#CAD3FB\", # 6 lavender\n                  \"#9CD4EA\", # 7 sky\n                  \"#FFA497\") # 8 peach\n\n# define breaks for fill variable\nstate_rev_breaks <- c(0, .4, .6, .7, .8, 1)\n\n# define custom color palette\nbw_scale <- c(bw_primary[6],\n              bw_secondary[1],\n              bw_primary[2],\n              bw_primary[3],\n              bw_primary[4])\n\n# create color palette object\nstate_rev_palette <- colorBin(palette = bw_scale,\n                              domain = state_shp$pct_sr,\n                              bins = state_rev_breaks,\n                              na.color = bw_primary[5]) \n\n# create advanced leaflet map\nleaflet() |>\n  addProviderTiles(provider = \"CartoDB.Positron\") |>\n  addPolygons(data = state_shp,\n              color = \"#ababab\",\n              weight = .5,\n              popup = paste0(\"District: \",\n                             str_to_title(state_shp$name), \n                             \"<br> Enrollment: \", \n                             comma(state_shp$enroll),\n                             \"<br> Percent state revenue: \",\n                             percent(state_shp$pct_sr, accuracy = .1)),\n              fillColor = ~ state_rev_palette(pct_sr),\n              fillOpacity = .8) |> \n  addLegend(\"topright\", \n            opacity = .8,\n            pal = state_rev_palette,\n            values = state_shp$pct_sr,\n            labFormat = labelFormat(\n              suffix = \"%\", between = \" - \",\n              transform = function(x) 100 * x\n            ),\n            title = \"Percent state revenue\")\n```\n:::\n\n\n::: callout\nNotice there is a \"\\~\" after the \"=\" in the \"fillColor\" parameter\n:::\n\n## Exporting a `leaflet` map\n\n::: columns\n::: {.column width=\"50%\"}\n-   Any map you generate with `leaflet` can be exported as a standalone HTML document.\n\n-   Without too much effort, you can publish this map yourself on GitHub (we can help you do this), embed it as an iframe on an existing webpage, or publish it as a standalone webpage. Those last two options may require support from your organization's web developer.\n:::\n\n::: {.column width=\"50%\"}\n![](images/leaflet-export.png){fig-align=\"center\"}\n:::\n:::\n\n# Homework\n\n**Reading**\n\n-  [***Balancing Act: How States Can Address Local Wealth Inequity in Education Finance***](https://bellwether.org/publications/balancing-act/)\n\n**Coding Task**\n\nUse the `hw06_map_template.R` file in the `/scripts` folder to complete the following tasks:\n\n-   Create at least three production-quality maps of district-level finance data for your state.\n-   Ensure that at least one of your maps includes state per-pupil funding as the `fill` variable.\n-   Be sure to use the `ggsave()` commands to save your final maps in the `/figures` folder.\n",
    "supporting": [
      "week_06_slides_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}