{
  "hash": "5b982e4280d399436760f75d7981c2ff",
  "result": {
    "markdown": "---\ntitle: \"Basic Data Analysis and Visualization in R\"\ndate: \"June 13, 2023\"\nformat: \n  revealjs:\n    chalkboard: true\nexecute:\n  freeze: auto\n  echo: false\n---\n\n\n\n# Homework Review\n\n## Solving a common problem with the homework\n\n\n# Introduction to the tidyverse\n\n## R is a functional programming language - most of what you will do in R is work with functions \n\nA function: \n\n-  Takes a specified input\n-  Performs an operation \n-  Returns an output\n\nFunctions are helpful tools to reduce repetition in typing and improves your code's \nconsistency, reliability and readability. \n\n## The tidyverse is a powerful collection of R packages - collections of functions - that work well together (1/2)\n\n- The most popular packages in the R community are past of what is called the \"tidyverse,\" which includes packages like ggplot2, tidyr, stringr, tibble, purrr\n- Tidyverse packages are built to work together. Every tidyverse package contains functons that can manipulate or visualize data that lives in data frames. \n\n## The tidyverse is a powerful collection of R packages - collections of functions - that work well together (2/2)\n\n- Most functions in the tidyverse require a data frame (R's version of a table) as the first argument in each function. The functions can be \"chained\" together with other functions. \n\nWe will explore the tidyverse by looking at EdBuild's FY2019 education data compiled from the F33 survey, SAIPE, EDGE, and CCD. The edbuildr package provides access to clean district\ndata on funding, student demographics, and wealth.\n\n## To read EdBuild's finance data into our working environment we will use the masterpull() function \n\nmasterpull(data_year = 2019, data_type = “fin”): Downloads a clean dataset from EdBuild’s server. There are three options for the data_type argument:\n\n- “geo”: only includes districts with geographic boundaries\n(no charter/special school districts) that meet EdBuild’s\ncriteria for fiscal analysis\n- “fin”: includes all districts that meet EdBuild’s criteria\nfor fiscal analysis\n- “full”: includes all districts – TO BE USED WITH\nCAUTION\n\n\n## The dplyr() package provides many functions to manipulate your data frames' columns and rows \n\nThe functions you'll most frequently use from the dplyr packages are: \n\n- select(): names columns to keep from a data frame\n- rename(): name columns to keep from a data frame \n- filter(): remove rows that do not meet the condition in the logical statement from the output\n- mutate(): create a new column that will be added to the end of your data frame. \n\n# Iterative exploratory analysis \n\n## LIVE CODING EXAMPLE: exploring_the_tidyverse.R \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load ----------\n\noptions(scipen = 999)\n\nlibrary(tidyverse)\nlibrary(edbuildr)\n\n# Krista likes to denote which spreadsheet is raw for transparency \ndist_fy19_raw <- masterpull(data_type = \"geo\")\n\n# filter Minnesota data and clean -----\n\n# filter, rename, and mutate data for Minnesota \nmn_ed_data <- dist_fy19_raw |>\n  filter(State == \"Minnesota\") |>\n  rename(district = NAME,\n         county = County,\n         enroll = ENROLL, \n         total_local_rev = LR,\n         total_state_rev = SR,\n         total_state_local_rev = SLR, \n         urbanicity = dUrbanicity, \n         operational_schools = dOperational_schools, \n         white_enroll = dWhite, \n         sped_enroll = dIEP, \n         ell_enroll = dLEP, \n         econ_dis_enroll = StPov,\n         bipoc_pct = pctNonwhite, \n         pov_pct = StPovRate,\n         median_house_income = MHI, \n         median_prop_value = MPV) |>\n  mutate(bipoc_enroll = enroll - white_enroll,\n         ell_pct = ell_enroll/enroll, \n         sped_pct = sped_enroll/enroll, \n         loc_rev_pp = total_local_rev/enroll,\n         state_rev_pp = total_state_rev/enroll,\n         local_state_rev_pp = total_state_local_rev/enroll) |>\n  select(district, county, enroll, loc_rev_pp, state_rev_pp, local_state_rev_pp, \n         total_local_rev, total_state_rev, total_state_local_rev, urbanicity, \n         operational_schools, pov_pct, bipoc_pct, ell_pct, sped_pct)\n```\n:::\n\n\n\n# BREAK \n\n# Visual exploratory analysis \n\n## Summarizing columns can be helpful, but it can hide nuance in your data that can be better seen via plotting \n\nThe ggplot2 package is the most widely-used data visualization approach in the R ecosystem. \n\n- ggplot plots are created by starting with your data, then building up layers \n- Once your specify your data, you can add layers of \"geoms\" to create your plot \n- Today we will use geom_histogram() and geom_point()\n\n# Iterating your way to beauty with ggplot2 \n\n## Step 1: Create a basic plot \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\n#first plot \n\nggplot(mn_ed_data, aes(x = bipoc_pct, y = pov_pct)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](week_02_ggplot_slides_files/figure-revealjs/unnamed-chunk-2-1.png){width=960}\n:::\n:::\n\n\n\n\n\n# Homework assignment \n\n\n\n\n\n",
    "supporting": [
      "week_02_ggplot_slides_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}