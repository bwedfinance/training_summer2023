{
  "hash": "80ae9884da1ff083068551b883abd67c",
  "result": {
    "markdown": "---\ntitle: \"Reproducible data analysis in R\"\ndate: \"July 11, 2023\"\nformat:\n  revealjs:\n    chalkboard: true\nexecute:\n  freeze: auto\n  echo: false\n---\n\n\n# Homework review\n\n# Setting up your data processing project\n\n## You can (and should) start your projects by creating a new repo on your GitHub account\n\n![](week_5_images/git_new.png){fig-align=\"center\"}\n\n## Before you start coding, set yourself up for a successful, reproducible analysis project\n\n-   Every new data analysis project should live in its own RStudio project\n-   Most of your projects should be started on Github, then cloned locally (just like we do with homework)\n    -   **Be sure to set your project repos to \"Private\" before creating them on Github!**\n    -   Also, using a `README.md` file can help you stay organized and keep track of data sources and/or outliers.\n-   RStudio projects can be also created locally by navigating to `File -> New Project...`, but it's more difficult to connect it to Github if you start that way.\n\n## Remember: After you've created a project, use a consistent folder structure to keep your analysis organized\n\n::: columns\n::: {.column width=\"50%\"}\n-   Building a consistent file structure in your projects will help you (and others!) easily navigate your code.\n\n-   Minimally, you will want to have a separate folder for:\n\n    -   `data`\n\n    -   `scripts`\n\n    -   `figures`\n:::\n\n::: {.column width=\"50%\"}\n![](https://i.stack.imgur.com/AlNMJ.png){fig-align=\"center\" width=\"350\"}\n:::\n:::\n\n## Another layer of organization: Separate your raw and processed data!\n\n::: columns\n::: {.column width=\"50%\"}\n-   Use sub-folders within your `/data` folder to keep your raw data files separated from any processed data files you produce during your analysis.\n-   This creates additional procedural barrier to accidentally over-writing your raw data.\n-   Use the `/processed` data folder for exporting clean data or results of your analysis, like summary tables.\n:::\n\n::: {.column width=\"50%\"}\n![](week_5_images/Screenshot%202023-06-27%20at%204.50.22%20PM.png){fig-align=\"center\" width=\"475\"}\n:::\n:::\n\n# Sourcing Scripts\n\n## You can use the source function in R to reuse functions that you create in another R script.\n\n-   The **source** function uses this basic syntax: `source(\"path/to/some/file.R\")` to run scripts you've written behind-the-scenes, giving you access to the objects created by that script.\n-   Breaking up your data cleaning and analysis work across multiple scripts can be very helpful during complex projects.\n-   This approach makes it easier to isolate errors and update code.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load -----\n\nlibrary(tidyverse)\nlibrary(readxl)\n\noptions(scipen = 999)\n\n# Calling in scripts from the \"updated_app_data\" folder then the code in \n# scripts 1-13 will run! \nsource(\"updated_app_data/13_updated_2020_app_data.R\") \n```\n:::\n\n\n## Live coding example: U.S. Census Annual Survey of School System Finances\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 2_f33_2008_2013_clean\n# 2022-10-05 last updated by Krista Kaput\n\n# load -----\n\nlibrary(tidyverse)\nlibrary(readxl)\n\noptions(scipen = 999)\n\n# source script cleaning f33 data from 2002-2007\nsource(\"f33_finance_enrollment_scripts/1_f33_2002_2007_clean.R\")\n\n# load raw f33 from 2008 \nf33_2008_raw <- read_excel(\"raw_data/f33_finance_raw/elsec08_sttables.xls\", \n              sheet = \"1\", skip = 9, n_max = 53)\n\n# load raw f33 from 2009\nf33_2009_raw <- read_excel(\"raw_data/f33_finance_raw/elsec09_sttables.xls\", \n                           sheet = \"1\", skip = 9, n_max = 53)\n\n# load raw f33 from 2010 \nf33_2010_raw <- read_excel(\"raw_data/f33_finance_raw/elsec10_sttables.xls\", \n                           sheet = \"1\", skip = 9, n_max = 53)\n\n# load raw f33 from 2011\nf33_2011_raw <- read_excel(\"raw_data/f33_finance_raw/elsec11_sttables.xls\", \n                           sheet = \"1\", skip = 9, n_max = 53)\n\n# load raw f33 from 2012 \nf33_2012_raw <- read_excel(\"raw_data/f33_finance_raw/elsec12_sttables.xls\", \n                          sheet = \"1\", skip = 7, n_max = 53)\n\n# load raw f33 from 2013 \nf33_2013_raw <- read_excel(\"raw_data/f33_finance_raw/elsec13_sttables.xls\", \n                           sheet = \"1\", skip = 7, n_max = 53)\n\n\n# clean all 2008 f33 data ---------\nf33_2008_all <- f33_2008_raw |>\n  rename(state = \"...1\",\n         total_revenue = \"Total Revenue\",\n         federal_revenue = \"Federal Revenue\",\n         state_revenue = \"State Revenue\",\n         local_revenue = \"Local Revenue\",\n         total_expenditures = \"Total Expenditure\",\n         current_expenditures = \"Current Spending\",\n         capital_expenses = \"Capital Outlay\") |>\n  mutate(year = 2008) |>\n  select(year, state, total_revenue, federal_revenue, state_revenue, local_revenue,\n         total_expenditures, current_expenditures, capital_expenses)\n\n# filter for 2008 national f33 data\nf33_2008_us <- f33_2008_all |>\n  filter(total_revenue == \"582125621\")\n\n# filter for 2008 state f33 data\nf33_2008_states <- f33_2008_all |>\n  filter(total_revenue != \"582125621\")\n\n\n# clean all 2009 f33 data ---------\nf33_2009_all <- f33_2009_raw |>\n  rename(state = \"...1\",\n         total_revenue = \"Total Revenue\",\n         federal_revenue = \"Federal Revenue\",\n         state_revenue = \"State Revenue\",\n         local_revenue = \"Local Revenue\",\n         total_expenditures = \"Total Expenditure\",\n         current_expenditures = \"Current Spending\",\n         capital_expenses = \"Capital Outlay\") |>\n  mutate(year = 2009) |>\n  select(year, state, total_revenue, federal_revenue, state_revenue, local_revenue,\n         total_expenditures, current_expenditures, capital_expenses)\n\n# filter for 2009 national f33 data\nf33_2009_us <- f33_2009_all |>\n  filter(total_revenue == \"590947579\")\n\n# filter for 2009 state f33 data\nf33_2009_states <- f33_2009_all |>\n  filter(total_revenue != \"590947579\")\n\n# clean all 2010 f33 data ------------\nf33_2010_all <- f33_2010_raw |>\n  rename(state = \"...1\",\n         total_revenue = \"Total Revenue\",\n         federal_revenue = \"Federal Revenue\",\n         state_revenue = \"State Revenue\",\n         local_revenue = \"Local Revenue\",\n         total_expenditures = \"Total Expenditure\",\n         current_expenditures = \"Current Spending\",\n         capital_expenses = \"Capital Outlay\") |>\n  mutate(year = 2010) |>\n  select(year, state, total_revenue, federal_revenue, state_revenue, local_revenue,\n         total_expenditures, current_expenditures, capital_expenses)\n\n# filter for 2010 national f33 data\nf33_2010_us <- f33_2010_all |>\n  filter(total_revenue == \"592895329\")\n\n# filter for 2010 state f33 data\nf33_2010_states <- f33_2010_all |>\n  filter(total_revenue != \"592895329\")\n\n# clean all 2011 f33 data ------------\nf33_2011_all <- f33_2011_raw |>\n  rename(state = \"...1\",\n         total_revenue = \"Total Revenue\",\n         federal_revenue = \"Federal Revenue\",\n         state_revenue = \"State Revenue\",\n         local_revenue = \"Local Revenue\",\n         total_expenditures = \"Total Expenditures\",\n         current_expenditures = \"Current Spending\",\n         capital_expenses = \"Capital Outlay\") |>\n  mutate(year = 2011) |>\n  select(year, state, total_revenue, federal_revenue, state_revenue, local_revenue,\n         total_expenditures, current_expenditures, capital_expenses)\n```\n:::\n\n\n# What is R Markdown?\n\n## R Markdown is a special file type that allows you to combine code with plain text to create reports {.smaller}\n\n::: columns\n::: {.column width=\"50%\"}\n1.  **YAML Header:** Controls certain output settings that apply to the entire document.\n\n2.  **Code Chunk**: Includes code to run, and code-related options.\n\n3.  **Body Text:** For communicating results and findings to the targeted audience.\n\n4.  **Code to Generate a Table:** Outputs a table with minimal formatting like you would see in the console.\n\n5.  **Section Header**: Specified with `##`.\n\n6.  **Code to Generate a Plot**: Outputs a plot. Here, the code used to generate the plot will not be included because the parameter `echo=FALSE` is specified.\n:::\n\n::: {.column width=\"50%\"}\n![](week_5_images/Screenshot%202023-06-27%20at%205.19.26%20PM.png){fig-align=\"center\" width=\"550\"}\n:::\n:::\n\n## R Markdown combines \"chunks\" of R code with blocks of Markdown-formatted text {.smaller}\n\n::: columns\n::: {.column width=\"50%\"}\nR code chunks in R Markdown are contained within a pair of triple backticks that include a curly brace that indicates the section contains r code:\n\n\\`\\`\\`{r}\n\n\\<code goes here\\>\n\n\\`\\`\\`\n\n-   Markdown is a \\*really\\* easy way to format text. For more, visit [Markdown Guide](https://www.markdownguide.org/cheat-sheet/)).\n\n-   For more on using R Markdown documents, check out [RStudio's resources here](https://rmarkdown.rstudio.com/).\n:::\n\n::: {.column width=\"50%\"}\n![](week_5_images/Screenshot%202023-06-27%20at%205.25.44%20PM.png){fig-align=\"center\"}\n:::\n:::\n\n## LIVE CODING EXAMPLE: Kentucky EdBuild Data Analysis\n\n![](week_5_images/Screenshot%202023-06-27%20at%205.31.13%20PM.png){fig-align=\"center\"}\n\n# What is Quarto?\n\n## Quarto is a multi-language, next generation version of R Markdown from RStudio {.smaller}\n\n-   Like R Markdown, Quarto is free and open source\n-   Quarto also uses Knitr to execute R code, so it can render most existing Rmd files without modification\n-   Use a single source document to target multiple formats (HTML, PDF, Word, etc.)\n-   It's language-agnostic. It can render documents that contain code written in R, Python, Julia, or Observable.\n-   Check out the gallery of [Quarto examples](https://quarto.org/docs/gallery/)\n\n![](week_5_images/Screenshot%202023-06-27%20at%205.42.57%20PM.png){fig-align=\"center\"}\n\n## How to use Quarto: Rendering\n\n-   Use the **Render** button to render the file and preview the output with a single click or keyboard shortcut (⇧⌘K)\n\n-   You can also automatically render whenever you save. To do that you check the Render on Save option on the editor toolbar. The preview will update whenever you re-render the document. Side-by-side preview works for both HTML and PDF outputs.\n\n-   When rendering, Quarto generates a new file that contains selected text, code, and results from the .qmd file. The new file can be an [HTML](https://quarto.org/docs/output-formats/all-formats.html), [PDF](https://quarto.org/docs/output-formats/pdf-basics.html), [MS Word](https://quarto.org/docs/output-formats/ms-word.html) document, [presentation](https://quarto.org/docs/presentations/), [website](https://quarto.org/docs/websites/), [book](https://quarto.org/docs/books/), [interactive document](https://quarto.org/docs/interactive/), or [other format](https://quarto.org/docs/output-formats/all-formats.html).\n\n![](week_5_images/Screenshot%202023-06-27%20at%205.58.35%20PM.png){fig-align=\"center\"}\n\n## How to use Quarto: Authoring\n\n![](week_5_images/Screenshot%202023-06-27%20at%206.02.08%20PM.png){fig-align=\"center\"}\n\n## LIVE CODING EXAMPLE: Kentucky EdBuild Data Analysis\n\n![](week_5_images/Screenshot%202023-07-05%20at%204.34.56%20PM.png){fig-align=\"center\" width=\"625\"}\n\n# Homework\n\n## This week's homework assignment\n\n**Reading assignment**\n\n-   [***What Should the Future of School Finance Equity Look Like?***](https://bellwether.org/wp-content/uploads/2021/10/Bellwether_SplittingBill_09-FutureEquity_Final.pdf)\n\n**Coding task**\n\n- Continue working on your `week04` assignment!\n- If you've completed a join of your first two datasets, add in the rest of the data you'll need to model your state's current funding formula\n- Two blocks of office hours will be available this week on Thursday and Friday to help with any data joining and/or cleaning challenges\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}