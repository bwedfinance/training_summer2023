{
  "hash": "6b9e20420b55f68422efffa0656d7787",
  "result": {
    "markdown": "---\ntitle: \"Data cleaning and processing in R\"\ndate: \"June 27, 2023\"\nformat:\n  revealjs:\n    chalkboard: true\nexecute:\n  freeze: auto\n  echo: false\n---\n\n::: {.cell}\n\n:::\n\n\n\n# Review\n\n## Review from Week 2\n\nGeneral tips and things to keep in mind from talking with several of you:\n\n-   Keep all of your variable names lowercase (including dataframes!) --- it helps prevent potential problems and errors.\n-   In order to create a scatterplot or histogram with `ggplot()`, you need to make sure the dataframe you want to use is available in your working environment. Reminder: your working environment will be empty when you start RStudio --- you'll need to run each line of code that comes *before* your plot code in order for it to run successfully.\n-   To run the code for a plot, you can execute it by clicking \"Run\" or hitting Command + Enter on your keybord if you have either 1) placed your cursor anywhere in the code for the plot or 2) you've higlighted all of the lines of code to create your plot (highlighting a single line will *not* work).\n\n# Principles of tidy data\n\n## Cleaning your data: One of the most important and under-appreciated stages of good data analysis\n\n::: callout\n**\"Tidy datasets are all alike, but every messy dataset is messy in its own way.\" - Hadley Wickham**\n:::\n\n-   Education finance data, like most other data, rarely come to us in a format that is plug-and-play ready for analysis.\n\n-   A high-quality analysis of your state's school finance system must start with gathering and cleaning relevant data.\n\n-   This starts with ensuring that each dataframe of raw data you read into R goes through a process of becoming \"tidy\" --- once you have tidy data, merging and visualizing data becomes much easier.\n\n-   The process of tidying your data is also helpful for identifying anomalies or outliers in your raw data files.\n\n## The principles of \"tidy data\" provide a helpful vision of what good, clean data should look like {.smaller}\n\n::: columns\n::: {.column width=\"50%\"}\nTidy data follows three rules:\n\n1.  Each column is a variable\n2.  Each row is an observation\n3.  Each cell is a value\n:::\n\n::: {.column width=\"50%\"}\nBuilding tidy datasets will:\n\n• Bring consistency to your data across scripts/projects\n\n• Make it easier to work with functions in the \\`tidyverse\\`, which is built to work will with \"tidy\" data\n:::\n:::\n\n![](https://d33wubrfki0l68.cloudfront.net/6f1ddb544fc5c69a2478e444ab8112fb0eea23f8/08547/images/r4ds/tidy-1.png){fig-align=\"center\"}\n\n::: aside\nSource: [R for Data Science](https://r4ds.had.co.nz/tidy-data.html)\n:::\n\n## It takes a bit of work to make data tidy, including the use of functions to reshape your data\n\nDatasets can violate the principles of tidy data in several ways:\n\n- **Variables can be embedded across columns**: An common example is when multiple columns represent data from different years. In this case, a variable (year) is actually represented by column names instead of being captured in its own \"year\" column.\n- **Solution**: Pivot your data longer!\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 4\n  state sy20_rev sy21_rev sy22_rev\n  <chr>    <dbl>    <dbl>    <dbl>\n1 AL     2023902  2304983  3930833\n2 AK      230993   233466   283948\n3 AZ      203492   390282   409828\n```\n:::\n:::\n\n\n\n\n## It takes a bit of work to make data tidy, including the use of functions to reshape your data, cont.\n\n- **A single observation may be spread across multiple rows**: This can happen when one column includes multiple variable types within it. And example would be if a dataframe had a \"data_type\" column that included entries like \"n_tested\" and \"pct_prof\".\n- **Solution**: Pivot your table wider!\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n  sch_name         data_type  value\n  <chr>            <chr>      <dbl>\n1 Alpha Elementary n_tested  230   \n2 Alpha Elementary pct_prof    0.53\n3 Bravo Middle     n_tested  492   \n4 Bravo Middle     pct_prof    0.34\n5 Charlie High     n_tested  434   \n6 Charlie High     pct_prof    0.43\n```\n:::\n:::\n\n\n\n## `pivot_longer()` is useful when a variable is embedded across several column names\n\n![](https://epirhandbook.com/en/images/pivoting/pivot_longer_new.png){fig-align=\"center\"}\n\n::: aside\nSource: [The Epidemiologist R Handbook](https://epirhandbook.com/en/pivoting-data.html#wide-to-long)\n:::\n\n## Live coding example: Using `pivot_longer()` {.scrollable}\n\nKey arguments of the `pivot_longer()` function:\n\n-   `cols`: The names of the columns to pivot using [`tidy-select`](https://tidyr.tidyverse.org/reference/tidyr_tidy_select.html)\n-   `names_to`: The name for the new character column\n-   `values_to`: The name for the new values column\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# PIVOT LONGER EXAMPLE\n\n# load ----\nlibrary(tidyverse)\n\n# read in data for analysis\nusa_2008_2021 <- read_csv(\"slides/week_04/data/usa_2008_2021.csv\")\n\n# Clean and analyze data ----\n\n# Per-Pupil Education Streams \nusa_all_education_streams_long <- usa_2008_2021 |>\n  # Filter out years that we don't need in our analysis \n  filter(year > 2007) |>\n  # Select variables that we want to use to pivot our data longer \n  select(year, usa_state_pp, usa_local_pp, usa_federal_pp) |> \n  pivot_longer(cols = usa_state_pp:usa_federal_pp, # These are the columns we want to pivot \n               names_to = \"revenue_source\", # The name for the new character column\n               values_to = \"revenue\") |> # The name for the new values \n  # Convert the column created with \"names_to\" to a nicely-labeled factor\n  mutate(revenue_source = factor(revenue_source,\n                                 # specify the order of values in this variable\n                                 levels = c(\"usa_state_pp\",\n                                            \"usa_local_pp\", \n                                            \"usa_federal_pp\"),\n                                 # give the variable nice labels\n                                 # these need to be the same order as the levels you set!\n                                 labels = c(\"Local\", \"State\", \"Federal\"))) |>\n  # create a new column that indicates all of this data is national\n  mutate(state = \"United States\") |>\n  # create a nicely-formatted year column\n  mutate(year_1 = year - 1,\n         year_2 = str_sub(as.character(year), start = 3),\n         year = paste0(year_1, \"-\", year_2)) |>\n  # remove intermediate year columns |> \n  select(-year_1, -year_2) |> \n  # reorder our columns so that state and year are first\n  select(state, year, everything())\n```\n:::\n\n\n## If your data includes data from a single observation spread across multiple rows, use `pivot_wider()`\n\n![](https://bcheggeseth.github.io/112_fall_2022/images/pivot_wider.png){fig-align=\"center\"}\n\n::: aside\nSource: [Macalester College COMP/STAT 112: Introduction to Data Science](https://bcheggeseth.github.io/112_fall_2022/reshaping-data.html#wider)\n:::\n\n## Live coding example: Using `pivot_wider()` \n\nBreaking down the code:\n\n-   **names_from:** The column with values that include multiple variables; will be pivoted into column names.\n-   **values_from:** The column with values will be used as cell values after pivoting.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# PIVOT WIDER EXAMPLE\ndist_sped_raw <- read_csv(\"data/dist_sped_raw.csv\")\n\n# clean special ed data ---------\n\ndist_sped <- dist_sped_raw |>\n  pivot_wider(names_from = cat_number, # The column where we are using the value as a column name \n              values_from = enroll) # The column whose values will be used as the values in the cell \n```\n:::\n\n\n# Techniques to clean messy data\n\n## Cleaning data can be challenging, but it's easier if you take a systematic approach {.smaller}\n\n+--------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Step               | Goal                                                                                                                                                                   |\n+====================+========================================================================================================================================================================+\n| Data import        | Ensure your import function is set up to read the data properly                                                                                                        |\n+--------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Column names       | Reformat or manually create column names that are:                                                                                                                     |\n|                    |                                                                                                                                                                        |\n|                    | -   lowercase                                                                                                                                                          |\n|                    |                                                                                                                                                                        |\n|                    | -   use underscores instead of spaces                                                                                                                                  |\n|                    |                                                                                                                                                                        |\n|                    | -   do not begin with a number                                                                                                                                         |\n|                    |                                                                                                                                                                        |\n|                    | -   follow a consistent format                                                                                                                                         |\n+--------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Mis-formatted data | Work with functions from base R like `as.numeric()` or from the `tidyverse` packages like `stringr` to clean the data that appear in a different format than you want. |\n+--------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Missing data       | Identify where in your dataset there are missing variables and/or outliers - this may be more of an iterative process as your explore your data.                       |\n+--------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n\n## Live coding example: florida_clean.R\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load ---------\n\noptions(scipen = 999)\n\nlibrary(tidyverse)\nlibrary(readxl)\n\n# load fl revenue raw data\nfl_tax_raw <- read_excel(\"data/1819Tables.xlsx\", \n                         sheet = 9)\n\n# skip first row when reading data\nfl_tax_raw <- read_excel(\"data/1819Tables.xlsx\", \n                         sheet = 9, skip = 1)\n\n# limit data to max of 67 rows\nfl_tax_raw <- read_excel(\"data/1819Tables.xlsx\", \n                         sheet = 9, skip = 1, n_max = 67)\n\n# clean ---------\n\n# fix column names\nfl_tax_clean <- fl_tax_raw |>\n  # convert colnames to lowercase\n  rename_with(tolower) \n\n# look at column names\nnames(fl_tax_clean)\n\n# create vector of new column names\nnew_names <- c(\"district\", \n               \"operating_millage\", \n               \"tax_roll_fy18\",\n               \"operating_tax_yield\", \n               \"required_effort\")\n\n# manually replace column names\ncolnames(fl_tax_clean) <- new_names\n\n# look at column names now\nnames(fl_tax_clean)\n\n# look at district names\nglimpse(fl_tax_clean$district)\n\n# convert district names to title case\nfl_tax_clean <- fl_tax_clean |> \n  mutate(district = str_to_title(district))\n\n# look at district names now\nglimpse(fl_tax_clean$district)\n\n# fix a special case - \"Desoto\" should be \"DeSoto\"\nfl_tax_clean$district[14]\n\n# replace all instances of \"Desoto\" with \"DeSoto\"\nfl_tax_clean <- fl_tax_clean |> \n  mutate(district = str_replace_all(district, \"Desoto\", \"DeSoto\"))\n\n# check that the above code worked\nfl_tax_clean$district[14]\n```\n:::\n\n\n# Joining datasets\n\n## Your data will rarely come to you in a single table. You will need to join functions to merge dataframes together\n\nTo join two dataframes, they need to share a common column with a unique identifier.\n\nState departments of education typically assign a unique ID number to each school district. **Make sure this is available in your datasets.**\n\nJoining datasets on a name (e.g. school or district) can create problems based on:\n\n-   Capitalization (Mcgregor v. McGregor)\n-   Abbreviation (St. Paul v. Saint Paul)\n-   Mis-spelling (it happens!)\n\n## Using `left_join()` to merge datasets will help preserve your data {.smaller}\n\n::: columns\n::: {.column width=\"50%\"}\n-   Once you have dataframes that share a common ID column, start with your most reliable set of data (typically student count data like ADM or enrollment) and use `left_join()` to attach additional data to that table.\n\n-   This approach will preserve your original data, keeping the number of rows (e.g. districts or schools) consistent as you use `left_join()` to add data by adding more columns.\n\n-   When a record in the \"left\" dataframe does not have a match in the \"right\" dataframe, `left_join()` will impute a value of `NA` for all such instances.\n:::\n\n::: {.column width=\"50%\"}\n![](images/join-left.png){fig-align=\"center\"}\n:::\n:::\n\n::: aside\nSource: [R for Data Science](https://r4ds.had.co.nz/relational-data.html#outer-join)\n:::\n\n## Coding example: How to use `left_join()`\n\n-   **Example 1:** The common ID columns have the same variable names (sch_id)\n-   **Example 2:** The common ID columns have different variable names. The **sch_clean** dataframe's variable is sch_id, while the **sch_el** data frame's variable name is school_id. The column names can be different, but the values within the cells must be the same so we can join them.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# join data ---------\n\n# EXAMPLE 1: Join the ADM, special education, economically disadvantaged, and ELL student data\nsch_clean <- sch_adm |>\n  left_join(sch_ed, by = \"sch_id\") |>\n  left_join(sch_sped, by = \"sch_id\") \n\n# EXAMPLE 2: Join the ELL data \n\nsch_clean <- sch_clean |>\n  left_join(sch_el, by = c(\"sch_id\" = \"school_id\"))\n```\n:::\n\n\n## As you merge dataframes, be sure to use `anti_join()` to examine missing data\n\nUsing the `anti_join()` function from the [dplyr](https://dplyr.tidyverse.org/index.html) package in R returns all rows in one data frame that do not have matching values in another data frame. Using anti_join() allows you to explore the incongruities in your data.\n\n![](https://d33wubrfki0l68.cloudfront.net/f29a85efd53a079cc84c14ba4ba6894e238c3759/c1408/diagrams/join-anti.png){fig-align=\"center\"}\n\n::: aside\nSource: [R for Data Science](https://r4ds.had.co.nz/relational-data.html#understanding-joins)\n:::\n\n## Coding example: How to use `anti_join()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# matching tests --------\n\n# only charlie county, which only has adm of 5\ndist_no_area <- dist_summary |>\n  anti_join(state_dist_area)\n\n# check to make sure there aren't any distircts in the area df\n# that arent in our dist_summary df\n# no misses!\narea_no_dist <- state_dist_area |>\n  anti_join(dist_summary)\n```\n:::\n\n\n# Break\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_de1fa84c\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;font-size:1.5em;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">10</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n\n# An example with `tidycensus`\n\n## The `tidycensus` package can provide data at the school district level that may be helpful for school finance analysis\n\n::: columns\n::: {.column width=\"60%\"}\nThe Census Bureau collects a lot of information that is reported at the school district level. This includes information on topics that are relevant to school finance, like housing.\n\nThe `tidycensus` R package makes it easy to access, explore, and analyze Census Bureau data.\n\nUse `install.packages(\"tidycensus\")` to download the package in RStudio.\n:::\n\n::: {.column width=\"40%\" height=\"45%\" fig-align=\"center\"}\n![](https://walker-data.com/tidycensus/logo.png){fig-height=\"50%\" fig-align=\"center\"}\n:::\n:::\n\n## To get started, you'll need to sign up for an API key with the Census Bureau\n\n![](https://michaeldgarber.github.io/teach-r/images/census-api-key-landing.png){fig-align=\"center\"}\n\n[Signup for an API key here!](https://api.census.gov/data/key_signup.html)\n\n# In-class exercise\n\n## In-class coding example: clean_and_join.R (1/3)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load -----------\n\noptions(scipen = 999)\n\nlibrary(tidyverse)\nlibrary(edbuildr)\nlibrary(tidycensus)\nlibrary(viridis)\nlibrary(scales)\n\n# get your own api key from https://api.census.gov/data/key_signup.html\n# only run this line of code once after you replace the text below\n# with your API key\ncensus_api_key(\"YOUR API KEY GOES HERE\", install = TRUE, overwrite = TRUE)\n\n# get edbuild data\nedbuild_fy19 <- masterpull(data_type = \"geo\")\n\n# load census variables from 2019 acs 5-year estimates\nv19 <- load_variables(2019, \"acs5\", cache = TRUE)\n\n# get mortgage data for unified school districts\nmortgage_unified_raw <- get_acs(variables = c(\"B25101_001\", # total households\n                                              \"B25101_002\", # total with a mortgage\n                                              \"B25101_024\"), # total not mortgaged\n                        geography = \"school district (unified)\",\n                        state = \"MN\", \n                        year = 2019)\n\n# get mortgage data for elementary school districts\nmortgage_elementary_raw <- get_acs(variables = c(\"B25101_001\", # total households\n                                                  \"B25101_002\", # total with a mortgage\n                                                  \"B25101_024\"), # total not mortgaged\n                                    geography = \"school district (elementary)\",\n                                    state = \"MN\", \n                                    year = 2019)\n\n# get mortgage data for secondary school districts\nmortgage_secondary_raw <- get_acs(variables = c(\"B25101_001\", # total households\n                                                  \"B25101_002\", # total with a mortgage\n                                                  \"B25101_024\"), # total not mortgaged\n                                    geography = \"school district (secondary)\",\n                                    state = \"MN\", \n                                    year = 2019)\n\n\n# clean ------------\n\n# clean mortgage data for unified school districts\nmortgage_pct_unified <- mortgage_unified_raw |> \n  # replace vars with more descriptive names\n  mutate(variable = str_replace_all(variable, \"B25101_001\", \"households\"),\n         variable = str_replace_all(variable, \"B25101_002\", \"with_mortgage\"),\n         variable = str_replace_all(variable, \"B25101_024\", \"no_mortgage\")\n        ) |>  # close mutate \n  # remove margin of error column\n  select(-moe) |> \n  # pivot variable column into distinct columns\n  pivot_wider(names_from = variable, values_from = estimate) |> \n  # calculate percent of households within a school district with a mortgage\n  mutate(mortgage_pct = with_mortgage / households) \n\n# clean mortgage data for elementary school districts\nmortgage_pct_elementary <- mortgage_elementary_raw |> \n  mutate(variable = str_replace_all(variable, \"B25101_001\", \"households\"),\n         variable = str_replace_all(variable, \"B25101_002\", \"with_mortgage\"),\n         variable = str_replace_all(variable, \"B25101_024\", \"no_mortgage\")\n  ) |>  # close mutate \n  select(-moe) |> \n  pivot_wider(names_from = variable, values_from = estimate) |> \n  mutate(mortgage_pct = with_mortgage / households)\n\n# clean mortgage data for secondary school districts\nmortgage_pct_secondary <- mortgage_secondary_raw |> \n  mutate(variable = str_replace_all(variable, \"B25101_001\", \"households\"),\n         variable = str_replace_all(variable, \"B25101_002\", \"with_mortgage\"),\n         variable = str_replace_all(variable, \"B25101_024\", \"no_mortgage\")\n  ) |>  # close mutate \n  select(-moe) |> \n  pivot_wider(names_from = variable, values_from = estimate) |> \n  mutate(mortgage_pct = with_mortgage / households)\n# NOTE: this data isn't really that useful for mn!\n```\n:::\n\n\n## In-class coding example: clean_and_join.R (2/3)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# join ----------\n\n# join unified and elementary data by binding rows\nmortgage_pct_mn <- mortgage_pct_unified |> \n  bind_rows(mortgage_pct_elementary) |> \n  # filter out summary row\n  filter(GEOID != \"2199999\") |> \n  # arrange from largest to smallest district\n  arrange(-households)\n\n# join edbuild and census data using left_join\nedbuild_mortgage_mn <- edbuild_fy19 |> \n  filter(State == \"Minnesota\") |> \n  left_join(mortgage_pct_mn, by = c(\"NCESID\" = \"GEOID\"))\n\n# do the join again, but this time select for the columns we want to keep\n# to avoid duplicates like district.x and district.y\nedbuild_mortgage_mn <- edbuild_fy19 |> \n  filter(State == \"Minnesota\") |> \n  left_join(mortgage_pct_mn |> \n              select(GEOID, households, with_mortgage, mortgage_pct),\n            by = c(\"NCESID\" = \"GEOID\"))\n\n# use anti_join() to check for districts with no mortgage data\nedbuild_mortgage_mn_no_match <- edbuild_fy19 |> \n  filter(State == \"Minnesota\") |> \n  anti_join(mortgage_pct_mn |> \n              select(GEOID,households, with_mortgage, mortgage_pct),\n            by = c(\"NCESID\" = \"GEOID\"))\n\n# run the reverse anti_join to see if the census data has \n#  districts not included in the edbuild table\nmortgage_edbuild_mn_no_match <- mortgage_pct_mn |> \n  select(GEOID,households, with_mortgage, mortgage_pct) |> \n  anti_join(edbuild_fy19 |> \n              filter(State == \"Minnesota\") ,\n            by = c(\"GEOID\" = \"NCESID\"))\n```\n:::\n\n\n## In-class coding example: clean_and_join.R (3/3)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# plot -----------\n\n# first plot of the joined dataset\nggplot(edbuild_mortgage_mn) +\n  geom_point(aes(x = MHI, y = mortgage_pct, \n                 color = StPovRate, size = ENROLL),\n             alpha = .7) +\n  scale_size_area(max_size = 10, labels = label_comma()) +\n  scale_x_continuous(labels = label_dollar()) +\n  scale_y_continuous(labels = label_percent()) +\n  scale_color_viridis(labels = label_percent()) +\n  labs(x = \"MHI\", y = \"Percent of households with a mortgage\",\n       color = \"Poverty rate\", size = \"Enrollment\") +\n  theme_bw()\n\n# facet by sdType\nggplot(edbuild_mortgage_mn) +\n  geom_point(aes(x = MHI, y = mortgage_pct, \n                 color = StPovRate, size = ENROLL),\n             alpha = .7) +\n  scale_size_area(max_size = 10, labels = label_comma()) +\n  scale_x_continuous(labels = label_dollar()) +\n  scale_y_continuous(labels = label_percent()) +\n  scale_color_viridis(labels = label_percent()) +\n  labs(x = \"MHI\", y = \"Percent of households with a mortgage\",\n       color = \"Poverty rate\", size = \"Enrollment\") +\n  facet_wrap(~sdType) +\n  theme_bw()\n\n# filter out secondary districts and create better labels for \n# elementary and unified districts\nggplot(edbuild_mortgage_mn |> \n         filter(sdType != \"secon\") |> \n         mutate(sdType = case_when(sdType == \"elem\" ~ \"Elementary\",\n                                   sdType == \"uni\" ~ \"Unified\"))) +\n  geom_point(aes(x = MHI, y = mortgage_pct, \n                 color = StPovRate, size = ENROLL),\n             alpha = .7) +\n  scale_size_area(max_size = 10, labels = label_comma()) +\n  scale_x_continuous(labels = label_dollar()) +\n  scale_y_continuous(labels = label_percent()) +\n  scale_color_viridis(labels = label_percent()) +\n  labs(x = \"MHI\", y = \"Percent of households with a mortgage\",\n       color = \"Poverty rate\", size = \"Enrollment\") +\n  facet_wrap(~sdType) +\n  theme_bw()\n\n# same chart, but filter  allow for free x+y axis scales\nggplot(edbuild_mortgage_mn |> \n         filter(sdType != \"secon\") |> \n         mutate(sdType = case_when(sdType == \"elem\" ~ \"Elementary\",\n                                   sdType == \"uni\" ~ \"Unified\"))) +\n  geom_point(aes(x = MHI, y = mortgage_pct, \n                 color = StPovRate, size = ENROLL),\n             alpha = .7) +\n  scale_size_area(max_size = 10, labels = label_comma()) +\n  scale_x_continuous(labels = label_dollar()) +\n  scale_y_continuous(labels = label_percent()) +\n  scale_color_viridis(labels = label_percent()) +\n  labs(x = \"MHI\", y = \"Percent of households with a mortgage\",\n       color = \"Poverty rate\", size = \"Enrollment\") +\n  facet_wrap(~sdType, scales = \"free\") +\n  theme_bw()\n```\n:::\n\n\n# Homework assignment\n\n## This week's assignment {.smaller}\n\n**Reading assignment**\n\n-   [***How Can School Finance Systems Support Students with Additional Learning Needs?***](https://bellwether.org/wp-content/uploads/2021/10/Bellwether_SplittingBill_05-HowCanSchoolFinStudentswLearnNeeds_Final.pdf)\n\n**Coding task**\n\nClean your state's district data and make sure that you have all of the data you need to model your state's funding formula and the potential policy changes you want to make. This may require joining dataframes, `pivot_longer()`, `pivot_wider()` and/or using `mutate()` to merge, reshape, and tidy data from your state.\n\nUltimately, you'll want to produce a single dataframe where:\n\n- Each row represents a single LEA (traditional district or charter school)\n- Each column represents a single variable\n- All of the data elements that go into your current formula are present in the dataframe.\n\nIf you need to join more than two dataframes, **just start with joining two dataframes for this assingment.** We can work on building the full dataset you'll need to model your formula over the coming weeks.\n\nTo get started, a template R script is included: `scripts/dist_clean.R` – please use that file to load, clean, and save your tidy data.\n\nAs always, once you've completed the assignment, be sure to commit and push to GitHub!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}