{
  "hash": "7433c57ee845a561ce9af197bed37d82",
  "result": {
    "markdown": "---\ntitle: \"Data cleaning and processing in R\"\ndate: \"June 27, 2023\"\nformat:\n  revealjs:\n    chalkboard: true\nexecute:\n  freeze: auto\n  echo: false\n---\n\n\n# Homework Review\n\n## Solving a common problem with the homework\n\n# Principles of tidy data\n\n## Cleaning your data: One of the most important and under-appreciated stages of good data analysis\n\nEducation finance data, like all other data, rarely come to us in a format that is plug-and-play ready for analysis\n\nA high-quality analysis of your state's school finance system must start with gathering and cleaning relevant data.\n\n**\"Tidy datasets are all alike, but every messy dataset is messy in its own way.\" - Hadley Wickham**\n\n## The principles of \"tidy data\" provide a helpful vision of what good, clean data should look like.\n\nTidy data follows three rules:\n\n1.  Each column is a variable\n2.  Each row is an observation\n3.  Each cell is a value\n\n![Source: R for Data Science](https://d33wubrfki0l68.cloudfront.net/6f1ddb544fc5c69a2478e444ab8112fb0eea23f8/08547/images/r4ds/tidy-1.png)\n\n## If your data includes a variable that is embedded across several column names, use **pivot_longer()**\n\n![Source: R for Data Science](https://epirhandbook.com/en/images/pivoting/pivot_longer_new.png)\n\n## In-class coding example: How to use **pivot_longer()**\n\n\n\n## If your data includes data from a single observation spread across multiple rows, use **pivot_wider()**\n\n![Source: R for Data Science](https://bcheggeseth.github.io/112_fall_2022/images/pivot_wider.png)\n\n## In-class coding example: How to use **pivot_wider()**\n\n# Techniques to clean messy data\n\n## Cleaning data can be challenging, but it's easier if you take a systematic approach to every raw data file\n\n+-------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Step Number                   | Goal                                                                                                                                                                   |\n+===============================+========================================================================================================================================================================+\n| 1.  Data import               | Ensure your import function is set up to read the data properly                                                                                                        |\n+-------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| 2.  Column names              | Reformat or manually create column names that are:                                                                                                                     |\n|                               |                                                                                                                                                                        |\n|                               | -   lowercase                                                                                                                                                          |\n|                               |                                                                                                                                                                        |\n|                               | -   use underscores instead of spaces                                                                                                                                  |\n|                               |                                                                                                                                                                        |\n|                               | -   do not begin with a number                                                                                                                                         |\n|                               |                                                                                                                                                                        |\n|                               | -   follow a consistent format                                                                                                                                         |\n|                               |                                                                                                                                                                        |\n|                               |     -   Ex. rev_local_fy18 and rev_state_fy18                                                                                                                          |\n+-------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| 3.  Mis-formatted data        | Work with functions from base R like 'as.numeric()' or from the 'tidyverse' packages like 'stringr' to clean the data that appear in a different format than you want. |\n+-------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| 4.  Missing data and outliers | Identify where in your dataset there are missing variables and/or outliers - this may be more of an iterative process as your explore your data.                       |\n+-------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n\n## In-class coding example: minnesota_clean.R\n\n# Joining datasets\n\n## Your data will rarely come to you in a single table. You will need to join functions to merge dataframes together\n\nTo join two dataframes, they need to share a common column with a unique identifier.\n\nState departments of education typically assign a unique ID number to each school district. **Make sure this is available in your datasets.**\n\nJoining datasets on a name (e.g. school or district) can create problems based on:\n\n-   Capitalization (Mcgregor v. McGregor)\n-   Abbreviation (St. Paul v. Saint Paul)\n-   Mis-spelling (it happens!)\n\n## There are different ways to join datasets together, but using **left_join()** will keep your work consistent\n\n::: columns\n::: {.column width=\"50%\"}\n::: {.column width=\"50%\"}\nOnce you have dataframes that share a common ID column, start with your most reliable set of data (typically student count data like ADM or enrollment) and use **left_join()** to attach additional data to that table.\n\nThis will keep the number of rows (e.g. districts or schools) consistent as you use **left_join()** to add more data.\n:::\n:::\n\n::: {.column width=\"50%\"}\n![Source: R for Data Science](https://r4ds.had.co.nz/diagrams/join-outer.png)\n:::\n:::\n\n## In-class coding example: How to use **left_join()**\n\n## As you use **left_join()** to merge dataframes together, it's helpful to use anti-join to examine missing data.\n\nUsing the **anti_join()** function from the [dplyr](https://dplyr.tidyverse.org/index.html) package in R returns all rows in one data frame that do not have matching values in another data frame. Using anti_join() allows you to explore the incongruities in your data.\n\n![Source: R for Data Science](https://d33wubrfki0l68.cloudfront.net/f29a85efd53a079cc84c14ba4ba6894e238c3759/c1408/diagrams/join-anti.png)\n\n## In-class coding example: How to use **anti_join()**\n\n# Break\n\n# An example with **tidycensus**\n\n## The **'tidycensus'** package can provide data at the school district level that may be helpful for school finance analysis\n\n::: columns\n::: {.column width=\"50%\"}\nThe Census Bureau collects a lot of information that is reported at the school district level. This includes information on topics that are relevant to school finance, like housing.\n\nThe **'tidycensus'** R package makes it easy to access, explore, and analyze Census Bureau data.\n:::\n\n::: {.column width=\"50%\"}\n:::\n:::\n\n## To get started, youâ€™ll need to sign up for an API key with the Census Bureau, then install the tidycensus package\n\n\n\n# In-class exercise\n\n## In-class coding example: clean_and_join.R (1/3)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load -----------\n\noptions(scipen = 999)\n\nlibrary(tidyverse)\nlibrary(edbuildr)\nlibrary(tidycensus)\nlibrary(viridis)\nlibrary(scales)\n\n# get your own api key from https://api.census.gov/data/key_signup.html\ncensus_api_key(\"e06cf35bdaf878b6e70975a941f787b2923e753b\", install = TRUE, overwrite = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"e06cf35bdaf878b6e70975a941f787b2923e753b\"\n```\n:::\n\n```{.r .cell-code}\n# get edbuild data\nedbuild_fy19 <- masterpull(data_type = \"geo\")\n\n# load census variables from 2019 acs 5-year estimates\nv19 <- load_variables(2019, \"acs5\", cache = TRUE)\n\n# get mortgage data for unified school districts\nmortgage_unified_raw <- get_acs(variables = c(\"B25101_001\", # total households\n                                              \"B25101_002\", # total with a mortgage\n                                              \"B25101_024\"), # total not mortgaged\n                        geography = \"school district (unified)\",\n                        state = \"MN\", \n                        year = 2019)\n\n# get mortgage data for elementary school districts\nmortgage_elementary_raw <- get_acs(variables = c(\"B25101_001\", # total households\n                                                  \"B25101_002\", # total with a mortgage\n                                                  \"B25101_024\"), # total not mortgaged\n                                    geography = \"school district (elementary)\",\n                                    state = \"MN\", \n                                    year = 2019)\n\n# get mortgage data for secondary school districts\nmortgage_secondary_raw <- get_acs(variables = c(\"B25101_001\", # total households\n                                                  \"B25101_002\", # total with a mortgage\n                                                  \"B25101_024\"), # total not mortgaged\n                                    geography = \"school district (secondary)\",\n                                    state = \"MN\", \n                                    year = 2019)\n\n\n# clean ------------\n\n# clean mortgage data for unified school districts\nmortgage_pct_unified <- mortgage_unified_raw |> \n  # replace vars with more descriptive names\n  mutate(variable = str_replace_all(variable, \"B25101_001\", \"households\"),\n         variable = str_replace_all(variable,\"B25101_002\", \"with_mortgage\"),\n         variable = str_replace_all(variable,\"B25101_024\", \"no_mortgage\")\n        ) |>  # close mutate \n  # remove margin of error column\n  select(-moe) |> \n  # pivot variable column into distinct columns\n  pivot_wider(names_from = variable, values_from = estimate) |> \n  # calculate percent of households within a school district with a mortgage\n  mutate(mortgage_pct = with_mortgage / households) \n\n# clean mortgage data for elementary school districts\nmortgage_pct_elementary <- mortgage_elementary_raw |> \n  mutate(variable = str_replace_all(variable, \"B25101_001\", \"households\"),\n         variable = str_replace_all(variable,\"B25101_002\", \"with_mortgage\"),\n         variable = str_replace_all(variable,\"B25101_024\", \"no_mortgage\")\n  ) |>  # close mutate \n  select(-moe) |> \n  pivot_wider(names_from = variable, values_from = estimate) |> \n  mutate(mortgage_pct = with_mortgage / households)\n\n# clean mortgage data for secondary school districts\nmortgage_pct_secondary <- mortgage_secondary_raw |> \n  mutate(variable = str_replace_all(variable, \"B25101_001\", \"households\"),\n         variable = str_replace_all(variable,\"B25101_002\", \"with_mortgage\"),\n         variable = str_replace_all(variable,\"B25101_024\", \"no_mortgage\")\n  ) |>  # close mutate \n  select(-moe) |> \n  pivot_wider(names_from = variable, values_from = estimate) |> \n  mutate(mortgage_pct = with_mortgage / households)\n# NOTE: this data isn't really that useful for mn!\n```\n:::\n\n\n## In-class coding example: clean_and_join.R (2/3)\n\n::: {.cell}\n\n```{.r .cell-code}\n# join ----------\n\n# join unified and elementary data by binding rows\nmortgage_pct_mn <- mortgage_pct_unified |> \n  bind_rows(mortgage_pct_elementary) |> \n  # filter out summary row\n  filter(GEOID != \"2199999\") |> \n  # arrange from largest to smallest district\n  arrange(-households)\n\n# join edbuild and census data using left_join\nedbuild_mortgage_mn <- edbuild_fy19 |> \n  filter(State == \"Minnesota\") |> \n  left_join(mortgage_pct_mn, by = c(\"NCESID\" = \"GEOID\"))\n\n# do the join again, but this time select for the columns we want to keep\n# to avoid duplicates like district.x and district.y\nedbuild_mortgage_mn <- edbuild_fy19 |> \n  filter(State == \"Minnesota\") |> \n  left_join(mortgage_pct_mn |> \n              select(GEOID, households, with_mortgage, mortgage_pct),\n            by = c(\"NCESID\" = \"GEOID\"))\n\n# use anti_join() to check for districts with no mortgage data\nedbuild_mortgage_mn_no_match <- edbuild_fy19 |> \n  filter(State == \"Minnesota\") |> \n  anti_join(mortgage_pct_mn |> \n              select(GEOID,households, with_mortgage, mortgage_pct),\n            by = c(\"NCESID\" = \"GEOID\"))\n\n# run the reverse anti_join to see if the census data has \n#  districts not included in the edbuild table\nmortgage_edbuild_mn_no_match <- mortgage_pct_mn |> \n  select(GEOID,households, with_mortgage, mortgage_pct) |> \n  anti_join(edbuild_fy19 |> \n              filter(State == \"Minnesota\") ,\n            by = c(\"GEOID\" = \"NCESID\"))\n```\n:::\n\n## In-class coding example: clean_and_join.R (3/3)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# plot -----------\n\n# first plot of the joined dataset\nggplot(edbuild_mortgage_mn) +\n  geom_point(aes(x = MHI, y = mortgage_pct, \n                 color = StPovRate, size = ENROLL),\n             alpha = .7) +\n  scale_size_area(max_size = 10, labels = label_comma()) +\n  scale_x_continuous(labels = label_dollar()) +\n  scale_y_continuous(labels = label_percent()) +\n  scale_color_viridis(labels = label_percent()) +\n  labs(x = \"MHI\", y = \"Percent of households with a mortgage\",\n       color = \"Poverty rate\", size = \"Enrollment\") +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](week_04_slides_files/figure-revealjs/unnamed-chunk-3-1.png){width=960}\n:::\n\n```{.r .cell-code}\n# facet by sdType\nggplot(edbuild_mortgage_mn) +\n  geom_point(aes(x = MHI, y = mortgage_pct, \n                 color = StPovRate, size = ENROLL),\n             alpha = .7) +\n  scale_size_area(max_size = 10, labels = label_comma()) +\n  scale_x_continuous(labels = label_dollar()) +\n  scale_y_continuous(labels = label_percent()) +\n  scale_color_viridis(labels = label_percent()) +\n  labs(x = \"MHI\", y = \"Percent of households with a mortgage\",\n       color = \"Poverty rate\", size = \"Enrollment\") +\n  facet_wrap(~sdType) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](week_04_slides_files/figure-revealjs/unnamed-chunk-3-2.png){width=960}\n:::\n\n```{.r .cell-code}\n# filter out secondary districts and create better labels for \n# elementary and unified districts\nggplot(edbuild_mortgage_mn |> \n         filter(sdType != \"secon\") |> \n         mutate(sdType = case_when(sdType == \"elem\" ~ \"Elementary\",\n                                   sdType == \"uni\" ~ \"Unified\"))) +\n  geom_point(aes(x = MHI, y = mortgage_pct, \n                 color = StPovRate, size = ENROLL),\n             alpha = .7) +\n  scale_size_area(max_size = 10, labels = label_comma()) +\n  scale_x_continuous(labels = label_dollar()) +\n  scale_y_continuous(labels = label_percent()) +\n  scale_color_viridis(labels = label_percent()) +\n  labs(x = \"MHI\", y = \"Percent of households with a mortgage\",\n       color = \"Poverty rate\", size = \"Enrollment\") +\n  facet_wrap(~sdType) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](week_04_slides_files/figure-revealjs/unnamed-chunk-3-3.png){width=960}\n:::\n\n```{.r .cell-code}\n# same chart, but filter  allow for free x+y axis scales\nggplot(edbuild_mortgage_mn |> \n         filter(sdType != \"secon\") |> \n         mutate(sdType = case_when(sdType == \"elem\" ~ \"Elementary\",\n                                   sdType == \"uni\" ~ \"Unified\"))) +\n  geom_point(aes(x = MHI, y = mortgage_pct, \n                 color = StPovRate, size = ENROLL),\n             alpha = .7) +\n  scale_size_area(max_size = 10, labels = label_comma()) +\n  scale_x_continuous(labels = label_dollar()) +\n  scale_y_continuous(labels = label_percent()) +\n  scale_color_viridis(labels = label_percent()) +\n  labs(x = \"MHI\", y = \"Percent of households with a mortgage\",\n       color = \"Poverty rate\", size = \"Enrollment\") +\n  facet_wrap(~sdType, scales = \"free\") +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](week_04_slides_files/figure-revealjs/unnamed-chunk-3-4.png){width=960}\n:::\n:::\n\n\n\n# Homework assignment\n",
    "supporting": [
      "week_04_slides_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}