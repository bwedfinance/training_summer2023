{
  "hash": "9a58dbc618cb4a2196421b2c9c0fd36b",
  "result": {
    "markdown": "---\ntitle: \"Analyzing state education funding data with plotly\"\ndate: \"June 27, 2023\"\nformat:\n  revealjs:\n    chalkboard: true\nexecute:\n  freeze: auto\n  echo: false\n---\n\n\n# Homework Review\n\n## Overview of Homework\n\n# Introduction to sf and leaflet\n\n## Overview of **sf** package\n\n-   There are many R packages that handle spatial data. However, **sf** is the most modern and easy-to-use package.\n-   In the **sf** package, spatial data is represented as a simple feature:\n    -   A set of standards on how to store spatial objects.\n-   Spatial data is represented as a data frame with:\n    -   A geometry column that lists all the coordinates that make up the shape.\n\n    -   Slots that hold spatial information.\n\n*You can learn more about simple features and the **sf** package [here.](https://r-spatial.github.io/sf/articles/sf1.html)*\n\n## Reading and writing functions in **sf**\n\n-   **sf** uses the Geospatial Data Abstraction Library (GDAL)\n-   Use **st_read** to import all spatial data\n-   Use **st_write** to export all spatial data\n-   The filetype indicates the type of file you want to write to your computer - called the driver\n    -   This will most likely be either a shapefile (.shp) or geojson (.geojson)\n\n\n::: {.cell}\n\n:::\n\n\n## Conversion function in **sf**\n\nConvert a data frame with x and y to a **simple feature** using **st_as_sf()**\n\n-   **dataframe**\n-   **coords**: The columns that define x (latitude) and y (longtitude)\n-   **crs**: The coordinate system that translates x and y to a location on Earth\n\n\n::: {.cell}\n\n:::\n\n\n# Let's use **sf** together! In-class exercise Use simple feature objects with **sf** (1/3)\n\n**STEP 1:** At the top of your script, load the **sf** package into your environment.\n\n\n::: {.cell}\n\n:::\n\n\n**Note:** GEOS and GDAL are loaded when you load **sf** into your environment. They are the backbone spatial analysis and visualization in R.\n\n# Let's use **sf** together! In-class exercise Use simple feature objects with **sf** (2/3)\n\n**STEP 2:** Turn the Minnesota schools csv file into an sf object using the st_as_sf() function.\n\n\n::: {.cell}\n\n:::\n\n\nNote: the **sf** data frame looks like a regular data frame except:\n\n-   The lat and long colums have become one geometry column\n-   Two slots have been added: **sf_column** and **agr**\n    -   These define the geomtry column and how it relates to the attributes\n\n# Let's use **sf** together! In-class exercise Use simple feature objects with **sf** (3/3)\n\n**Step 3:** Check the projection of your objects using the **st_crs()** function. This returns the coordinate system that R has assumed.\n\n\n::: {.cell}\n\n:::\n\n\nThe two mapping systems:\n\n-   **World Geodetic System of 1984:** Most common and good for mapping global data.\n-   **North American Datum of 1983:** Good for mapping in the United States.\n\n## Overview of **leaflet** package\n\n**leaflet** is an interactive mapping package\n\n-   The **leaflet()** function creates a blank, interactive map canvas in your RStudio viewer pane\n-   Based on **leaflet.js**, which is a javascript library\n    -   Most common library for making web maps\n-   You can add elements to the map canvas using the generic **addControl()** function:\n    -   **addProviderTiles():** Adds a basemap\n    -   **addCirclemarker():** and **addMarker():** Adds a point layer\n    -   **addPolylines():** Adds a line layer\n    -   **addPolygons():** Add a polygon layer\n\n## Map location with **leaflet**\n\nOnce a year is added, the map will automatically zoom to the boundaries of the data you've included in your layer. This is also referred to as the extent of the layer.\n\n-   To change the boundaries you've included in your layer\n-   To center the map on a point and define the zoom level\n\n## In-class exercise: View Minnesota schools on a map with **leaflet** (1/5)\n\n**STEP 1:** At the top of your script make sure that **tidyverse**, **sf**, and **leaflet** are all installed and loaded.\n\n**STEP 2:** Create leaflet map wtih a baselayer\n\n\n::: {.cell}\n\n:::\n\n\n## In-class exercise: View Minnesota schools on a map with **leaflet** (2/5)\n\n**STEP 3:** Add Minnesota schools to the map and let the map define the view by the extent to the point layer.\n\n\n::: {.cell}\n\n:::\n\n\n## In-class exercise: View Minnesota schools on a map with **leaflet** (3/5)\n\n**STEP 4:** Define the size of the circles by enrollment\n\n\n::: {.cell}\n\n:::\n\n\n## In-class exercise: View Minnesota schools on a map with **leaflet** (4/5)\n\n**STEP 5:** Color the points by Title 1 school status\n\n\n::: {.cell}\n\n:::\n\n\n## There are many other parameters you can use to style your **leaflet** map\n\n-   **stroke:** Outline of the circles or polygons\n-   **color:** Outline color\n-   **weight:** Thickness of the outline\n-   **opacity:** Transparency of the outline - 0 (transparent) to 1 (opaque)\n-   **fill:** Inside of the circle or polygon\n-   **fillcolor:** Inside color\n\nYou can define colors with the hex code or by calling one of the color names included in base R\n\n## Adding a popup to your **leaflet** map\n\nThe **popup** parameter defines the text that displays when you clock on an object in your **leaflet** map - Combine it with the text using **paste()** function\n\n## There are a few considersations when adding the **popup** parameter\n\n-   Make usre tha tyou put the text within quotes\n-   Use **dataframe\\$** to call the variables you want to use\n-   <br> is the break html tag, which starts a new line\n\n## In-class exercise: View Minnesota schools on a map with **leaflet** (5/5)\n\n**STEP 6:** Add a **popup** with the schoo name to your Georgia leaflet\n\n\n::: {.cell}\n\n:::\n\n\n# Small group mapping\n\n## State Group Activity: Making maps in **leaflet**!!\n\n-   In your state teams, use the cleaned data in the folder to create a leaflet map for your state!\n-   Play around with the colors, sizing, and popups.\n-   Be prepared for at least one person in your group to share their map!\n\nAlex and Krista will be circulating to answer questions! Feel free to also come back into the main room if you have questions!\n\n# Break\n\n# Making maps with edbuildr data\n\n## Overview of **edbuildr**\n\n-   The goal of **edbuildr** is to import EdBuild's master data set that includes school district finance, student demographics, and community economic indicators for every school district in the United States.\n-   The master data set is available for any school year from 2013-2019 or longitudinally for all years 2013-2019.\n    -   School year is identified by the end year. For example, the 2018-19 school year is 2019.\n-   The master data set is built from the:\n    -   US Census,\n\n    -   Annual Survey of School System Finances (F33), and\n\n    -   joins data from the National Center for Education Statistics, Common Core of Data, Small Area Income and Poverty Estimates, and Education Demographic and Geographic Estimates.\n    \n## In-class exercise: Building a Minnesota map with **edbuildr** data (1/6)\n\n**STEP 1:** Load in the **edbuildr** and **edbuildmapr** packages. \n\n**STEP 2:** Pull the school district mapping data and filter out the data for Minnesota. \n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `shapefile_1819' from data source \n  `/private/var/folders/25/5vf1tf0164x0sv9_4xgtq9040000gn/T/Rtmp5iL66N/filec0cf5e791d1a/shapefile_1819.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 13315 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -179.1686 ymin: -14.54858 xmax: 179.7487 ymax: 71.38961\nGeodetic CRS:  NAD83\n```\n:::\n:::\n\n\n## In-class exercise: Building a Minnesota map with **edbuildr** data (2/6)\n**STEP 3:** Pull and clean the Minnesota data from the **edbuildr** data \n\n\n::: {.cell}\n\n:::\n\n\n## In-class exercise: Building a Minnesota map with **edbuildr** data (3/6)\n**STEP 4:** Join the **mn_shp** and the **mn_data** \n\n::: {.cell}\n\n:::\n\n\n## In-class exercise: Building a Minnesota map with **edbuildr** data (4/6)\n**STEP 5:** Plot the Minnesota map! \n\nWhile the map looks ok, there is a lot we can improve! Intuitively, it makes more sense for the color to get darker as the concentrations increase. In the next iteration, I am going to reverse the direction of the color scale, change the line colors to white, and add a title and a source. \n\n::: {.cell}\n::: {.cell-output-display}\n![](week_07_slides_files/figure-revealjs/unnamed-chunk-14-1.png){width=960}\n:::\n:::\n\n\n## In-class exercise: Building a Minnesota map with **edbuildr** data (5/6)\n**STEP 6:** Make several aesthetic changes: \n\n- Change the color of the lies to white within **geom_sf()** \n- Reverse the direction of the color scale within **scale_fill_viridis()** \n- Add a title, subtitle, and a source caption within **label()** \n\n::: {.cell}\n::: {.cell-output-display}\n![](week_07_slides_files/figure-revealjs/unnamed-chunk-15-1.png){width=960}\n:::\n:::\n\n\n\n\n\n# Small group mapping\n\n# Homework\n",
    "supporting": [
      "week_07_slides_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}